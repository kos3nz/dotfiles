gui:
  # stuff relating to the UI
  scrollHeight: 20 # how many lines you scroll by
  scrollPastBottom: false # enable scrolling past the bottom
  sidePanelWidth: 0.3333 # number from 0 to 1
  expandFocusedSidePanel: false
  mainPanelSplitMode: "horizontal" # one of 'horizontal' | 'flexible' | 'vertical'
  language: "en" # one of 'auto' | 'en' | 'zh' | 'pl' | 'nl' | 'ja' | 'ko'
  timeFormat: "02 Jan 06 15:04 MST" # https://pkg.go.dev/time#Time.Format
  # Config relating to colors and styles.
  # See https://github.com/jesseduffield/lazygit/blob/master/docs/Config.md#color-attributes
  authorColors:
    "kos3nz": "blue"
  theme:
    # Border color of focused window
    activeBorderColor:
      - blue
      - bold
    # Border color of non-focused windows
    inactiveBorderColor:
      - black
    # Border color of focused window when searching in that window
    searchingActiveBorderColor:
      - cyan
      - bold
    # Color of keybindings help text in the bottom line
    optionsTextColor:
      - blue
    # Background color of selected line.
    # See https://github.com/jesseduffield/lazygit/blob/master/docs/Config.md#highlighting-the-selected-line
    selectedLineBgColor:
      - black # set to `default` to have no background colour
    # Background color of selected line when view doesn't have focus.
    inactiveViewSelectedLineBgColor:
      - bold
    # Foreground color of copied commit
    cherryPickedCommitFgColor:
      - black
    # Background color of copied commit
    cherryPickedCommitBgColor:
      - green
    # Foreground color of marked base commit (for rebase)
    markedBaseCommitFgColor:
      - blue
    # Background color of marked base commit (for rebase)
    markedBaseCommitBgColor:
      - yellow
    # Color for file with unstaged changes
    unstagedChangesColor:
      - red
    # Default text color
    defaultFgColor:
      - white
  commitLength:
    show: true
  mouseEvents: true
  skipDiscardChangeWarning: false
  skipStashWarning: false
  showFileTree: true # for rendering changes files in a tree format
  showListFooter: true # for seeing the '5 of 20' message in list panels
  showRandomTip: true
  showBottomLine: true # for hiding the bottom information line (unless it has important information to tell you)
  showCommandLog: true
  showIcons: true
  nerdFontsVersion: "3" # nerd fonts version to use ("2" or "3"); empty means don't show nerd font icons
  commandLogSize: 14
  splitDiff: "auto" # one of 'auto' | 'always'
git:
  paging:
    colorArg: always
    pager: delta --dark --paging=never
  commit:
    signOff: false
  merging:
    # only applicable to unix users
    manualCommit: false
    # extra args passed to `git merge`, e.g. --no-ff
    args: ""
  log:
    # one of date-order, author-date-order, topo-order.
    # topo-order makes it easier to read the git log graph, but commits may not
    # appear chronologically. See https://git-scm.com/docs/git-log#_commit_ordering
    order: "topo-order"
    # one of always, never, when-maximised
    # this determines whether the git graph is rendered in the commits panel
    showGraph: "when-maximised"
    # displays the whole git graph by default in the commits panel (equivalent to passing the `--all` argument to `git log`)
    showWholeGraph: false
  skipHookPrefix: WIP
  autoFetch: true
  autoRefresh: true
  branchLogCmd: "git log --graph --color=always --abbrev-commit --decorate --date=relative --pretty=medium {{branchName}} --"
  overrideGpg: false # prevents lazygit from spawning a separate process when using GPG
  disableForcePushing: false
  parseEmoji: false
  allBranchesLogCmds:
    - git log --graph --all --color=always --abbrev-commit --decorate --date=relative  --pretty=medium
os:
  editPreset: "nvim" # see 'Configuring File Editing' section
refresher:
  refreshInterval: 10 # File/submodule refresh interval in seconds. Auto-refresh can be disabled via option 'git.autoRefresh'.
  fetchInterval: 60 # Re-fetch interval in seconds. Auto-fetch can be disabled via option 'git.autoFetch'.
update:
  method: prompt # can be: prompt | background | never
  days: 14 # how often an update is checked for
confirmOnQuit: false
# determines whether hitting 'esc' will quit the application when there is nothing to cancel/close
quitOnTopLevelReturn: false
disableStartupPopups: false
notARepository: "prompt" # one of: 'prompt' | 'create' | 'skip' | 'quit'
promptToReturnFromSubprocess: true # display confirmation when subprocess terminates
# Keybindings
keybinding:
  universal:
    quit: q
    quit-alt1: <c-c>
    return: <esc>
    quitWithoutChangingDirectory: Q
    togglePanel: <tab>
    prevItem: <up>
    nextItem: <down>
    prevItem-alt: k
    nextItem-alt: j
    prevPage: ","
    nextPage: .
    scrollLeft: H
    scrollRight: L
    gotoTop: <
    gotoBottom: ">"
    toggleRangeSelect: v
    rangeSelectDown: <s-down>
    rangeSelectUp: <s-up>
    prevBlock: <left>
    nextBlock: <right>
    prevBlock-alt: h
    nextBlock-alt: l
    nextBlock-alt2: <tab>
    prevBlock-alt2: <backtab>
    jumpToBlock:
      - "1"
      - "2"
      - "3"
      - "4"
      - "5"
    nextMatch: "n"
    prevMatch: "N"
    startSearch: /
    optionMenu: <disabled>
    optionMenu-alt1: "?"
    select: <space>
    goInto: <enter>
    confirm: <enter>
    confirmInEditor: <a-enter>
    remove: d
    new: "n"
    edit: e
    openFile: o
    scrollUpMain: <pgup>
    scrollDownMain: <pgdown>
    scrollUpMain-alt1: K
    scrollDownMain-alt1: J
    scrollUpMain-alt2: <c-u>
    scrollDownMain-alt2: <c-d>
    executeShellCommand: ":"
    createRebaseOptionsMenu: m
    # 'Files' appended for legacy reasons
    pushFiles: P
    # 'Files' appended for legacy reasons
    pullFiles: p
    refresh: R
    createPatchOptionsMenu: <c-p>
    nextTab: "]"
    prevTab: "["
    nextScreenMode: +
    prevScreenMode: _
    undo: z
    redo: <c-z>
    filteringMenu: <c-s>
    diffingMenu: W
    diffingMenu-alt: <c-e>
    copyToClipboard: <c-o>
    openRecentRepos: <c-r>
    submitEditorText: <enter>
    extrasMenu: "@"
    toggleWhitespaceInDiffView: <c-w>
    increaseContextInDiffView: "}"
    decreaseContextInDiffView: "{"
    increaseRenameSimilarityThreshold: )
    decreaseRenameSimilarityThreshold: (
    openDiffTool: <c-t>
  status:
    checkForUpdate: u
    recentRepos: <enter>
    allBranchesLogGraph: a
  files:
    commitChanges: c
    commitChangesWithoutHook: w
    amendLastCommit: A
    commitChangesWithEditor: C
    findBaseCommitForFixup: <c-f>
    confirmDiscard: x
    ignoreFile: i
    refreshFiles: r
    stashAllChanges: s
    viewStashOptions: S
    toggleStagedAll: a
    viewResetOptions: D
    fetch: f
    toggleTreeView: "`"
    openMergeTool: M
    openStatusFilter: <c-b>
    copyFileInfoToClipboard: "y"
  branches:
    createPullRequest: o
    viewPullRequestOptions: O
    copyPullRequestURL: <c-y>
    checkoutBranchByName: c
    forceCheckoutBranch: F
    rebaseBranch: r
    renameBranch: R
    mergeIntoCurrentBranch: M
    viewGitFlowOptions: i
    fastForward: f
    createTag: T
    pushTag: P
    setUpstream: u
    fetchRemote: f
    sortOrder: s
  worktrees:
    viewWorktreeOptions: w
  commits:
    squashDown: s
    renameCommit: r
    renameCommitWithEditor: R
    viewResetOptions: g
    markCommitAsFixup: f
    createFixupCommit: F
    squashAboveCommits: S
    moveDownCommit: <c-j>
    moveUpCommit: <c-k>
    amendToCommit: A
    resetCommitAuthor: a
    pickCommit: p
    revertCommit: t
    cherryPickCopy: C
    pasteCommits: V
    markCommitAsBaseForRebase: B
    tagCommit: T
    checkoutCommit: <space>
    resetCherryPick: <c-R>
    copyCommitAttributeToClipboard: "y"
    openLogMenu: <c-l>
    openInBrowser: o
    viewBisectOptions: b
    startInteractiveRebase: i
  amendAttribute:
    resetAuthor: a
    setAuthor: A
    addCoAuthor: c
  stash:
    popStash: g
    renameStash: r
  commitFiles:
    checkoutCommitFile: c
  main:
    toggleSelectHunk: a
    pickBothHunks: b
    editSelectHunk: E
  submodules:
    init: i
    update: u
    bulkMenu: b
  commitMessage:
    commitMenu: <c-o>
# Custom Commands
customCommands:
  # Add custom commands
  # https://github.com/jesseduffield/lazygit/blob/master/docs/Custom_Command_Keybindings.md
  - key: "E"
    description: "Add empty commit"
    context: "commits"
    command: 'git commit --allow-empty -m "empty commit"'
    loadingText: "Committing empty commit..."

  - key: "N"
    description: "Git Now"
    context: "files"
    command: "git add -A && git now"

  - key: "N"
    description: "add a new remote"
    context: "localBranches"
    prompts:
      - type: "input"
        title: "Remote Name"
        initialValue: "upstream"
      - type: "input"
        title: "Remote Url"
        initialValue: ""
    command: "git remote add {{index .PromptResponses 0}} {{index .PromptResponses 1}}"

  - key: <c-a>
    context: files
    description: "AIコミットメッセージを生成、編集、コミット"
    prompts:
      - type: menuFromCommand
        title: Select AI Commit Message
        key: CommitMsg
        command: |
          bash -c "
          # Check for staged changes
          diff=\$(git diff --cached)
          if [ -z \"\$diff\" ]; then
            echo \"No changes in staging. Add changes first.\"
            exit 1
          fi

          # Required quantity per final example
          COMMITS_TO_SUGGEST=10

          aichat \"
          You are an expert at writing Git commits. Your job is to write a short, clear commit message that summarizes the changes.

          Follow these guidelines for commit messages:
          - Your highest priority is to analyze and strictly match the style and format of the recent commits for reference
          - Use lowercase for the description (unless it includes proper nouns like \"React\" or \"GitHub\")
          - Do not end the subject line with a period
          - Use the imperative mood (e.g., \"add\", not \"added\" or \"adds\")
          - Limit the subject line to 50 characters when possible
          - If the recent commits lack a clear or consistent style, fall back to the Conventional Commits format: '<type>(<scope>): <description>'.
          - Always use one of these types:
            feat, fix, docs, style, refactor, perf, test, build, ci, chore
            Examples:
            chore(config): update ESLint rules
            fix(login): prevent crash on empty password
            docs(readme): add installation instructions
            style(css): fix button alignment on mobile
            feat(ui): add dark mode toggle
            refactor(settings): simplify theme loading logic
            test(home): add unit tests for sidebar
            build(deps): upgrade to React 18
            ci(github): fix broken deployment workflow
            perf(api): optimize response time for profile endpoint
          - Scope is optional but encouraged (put the affected component or area)
          - Each message must accurately and concisely summarize the changes
          - Output ONLY the raw commit messages, each on a new line. Do not include numbers, bullet points, or any other decorations
          - Use an exclamation mark (!) after type/scope for breaking changes:
            Example:
            feat(api)!: change API response format

          For the commit message body:
          - Add a body only if the change is complex or needs explanation
          - Always add a body for breaking changes, with a 'BREAKING CHANGE:' section
          - Do not separate the body from the subject line with a blank line
          - In the body, explain **what** and **why**, not **how**

          Example with body:
          feat(theme): add system dark mode support | This change adds automatic detection of system dark/light theme. It falls back to manual theme setting if system preference is unavailable.

          Example with breaking change:
          refactor(routes)!: update router structure for nested layouts | BREAKING CHANGE: All route definitions must now include layout wrappers.

          General Git style notes:
          - Capitalize only proper nouns and acronyms in the description
          - Commas are allowed; periods at the end of the subject are discouraged

          Only return the commit message(s) in your response. Do not include any additional meta-commentary.

          Generate $COMMITS_TO_SUGGEST distinct commit suggestions.

          IMPORTANT:
          - Do not wrap your response in markdown code blocks
          - Do not use \\\`\\\`\\\` or any other formatting
          - Just list each commit message directly, one per line

          Here is an example of previous commit messages in this repository:

          \$(git log -n 10 --pretty=format:\"%s\")

          Here is the diff:

          \$(git diff --cached)
          \""
    command: "# Create a temporary file for the commit message\ncommit_msg_file=$(mktemp)\n\n# Make sure to clean temp files\ntrap 'rm -f \"$commit_msg_file\"' EXIT\n\n# Clean the suggestions and save them to the file\ncommit_suggestions=$(echo \"{{.Form.CommitMsg}}\" | \\\n  sed 's/```[a-zA-Z]*//g' | \\\n  sed 's/```//g' | \\\n  sed 's/^[ \\t]*//g' | \\\n  sed 's/[ \\t]*$//g')\n\n# Write the suggestions to the temporary file\necho \"$commit_suggestions\" > \"$commit_msg_file\"\n\n# Saves the initial modification timestamp of the file\ninitial_timestamp=$(stat -c %Y \"$commit_msg_file\" 2>/dev/null || stat -f %m \"$commit_msg_file\")\n\n# Opens the commit message editor and captures the exit code\n${EDITOR:-vim} \"$commit_msg_file\"\neditor_exit=$?\n\n# Gets the new modification timestamp\nnew_timestamp=$(stat -c %Y \"$commit_msg_file\" 2>/dev/null || stat -f %m \"$commit_msg_file\")\n\n# Checks if the editor exited normally and if the file was saved\nif [ $editor_exit -ne 0 ]; then\n    echo \"Editor exited abnormally, commit aborted.\"\nelif [ \"$initial_timestamp\" != \"$new_timestamp\" ]; then\n    # The file was saved (timestamp has changed)\n    # Check if the file is not empty\nif [ -s \"$commit_msg_file\" ]; then\n        echo \"Creating commit with message: $selected_msg\"\n        git commit -F \"$commit_msg_file\"\n    else\n        echo \"No commit message selected, commit aborted.\"\n    fi\nelse\n    echo \"File was not saved, commit aborted.\"\nfi\n"
    output: terminal
    loadingText: "Generating commit message suggestions with AI"
