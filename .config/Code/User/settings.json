{
  /* -------------------------------------------------------------------------- */
  /*                                   Editor                                   */
  /* -------------------------------------------------------------------------- */
  "window.newWindowDimensions": "inherit", // ウィンドウのズームレベル
  "files.defaultLanguage": "markdown",
  "files.associations": {
    // "*.css": "tailwindcss"
    "*.mdx": "markdown",
    "*.module": "php"
  },
  "editor.renderWhitespace": "all",
  "editor.multiCursorModifier": "ctrlCmd",
  "editor.wordWrap": "on",
  "editor.hover.delay": 500,
  "editor.minimap.showSlider": "always",
  "editor.quickSuggestionsDelay": 10,
  "editor.autoClosingQuotes": "always",
  "editor.guides.bracketPairs": true,
  "editor.accessibilitySupport": "off",
  "editor.suggest.showStatusBar": true,
  "editor.tabSize": 2,
  "editor.cursorBlinking": "solid",
  "editor.guides.indentation": false,
  "editor.bracketPairColorization.enabled": true,
  "editor.useTabStops": false,
  "editor.inlineSuggest.enabled": true,
  "editor.acceptSuggestionOnCommitCharacter": false,
  "editor.codeLens": false,
  "editor.wordSeparators": "/\\()\"':,.;<>~!@#$%^&*|+={}[]`?",
  "editor.linkedEditing": true,
  "editor.stickyScroll.enabled": true,

  /* -------------------------------------------------------------------------- */
  /*                               Files & Search                               */
  /* -------------------------------------------------------------------------- */
  "files.watcherExclude": {
    // Default Settings
    "**/.git/**": true,
    "**/.git/objects/**": true,
    "**/.git/subtree-cache/**": true,
    "/node_modules": true,
    "**/node_modules/**": true,
    "**/.hg/store/**": true,
    // Build Directories or files
    "**/dist/**": true,
    "**/build/**": true,
    "**/.next/**": true,
    "**/.astro/**": true,
    // Bundle files
    "**/bundle.*": true,
    // Cache Directories or files
    "**/.cache": true,
    "**/tmp/**": true,
    // Custom Setting
    "**/GoogleDrive/**": true,
    "**/Library/**": true,
    "**/Pictures/**": true
  },
  "files.exclude": {
    "**/.git": true,
    "**/.DS_Store": true,
    "**/.hg": true,
    "**/.svn": true,
    "**/tmp": true
    // "**/node_modules": true,
    // "**/.next": true
  },
  "search.exclude": {
    // Default Settings
    "**/.git": true,
    "**/.DS_Store": true,
    "**/node_modules": true,
    // Build Drectories on files
    "**/build": true,
    "**/.next": true,
    "**/dist": true,
    // Bundle files
    "**/bundle.*": true,
    // Cache Directories or files
    "**/.cache": true
  },
  "search.followSymlinks": false,
  "search.searchOnType": true,
  "search.useIgnoreFiles": true,

  /* -------------------------------------------------------------------------- */
  /*                                  Explorer                                  */
  /* -------------------------------------------------------------------------- */
  "explorer.confirmDragAndDrop": false,
  "explorer.confirmDelete": false,
  "explorer.compactFolders": false,

  /* -------------------------------------------------------------------------- */
  /*                                    Font                                    */
  /* -------------------------------------------------------------------------- */
  "editor.fontFamily": "SF Mono Square, Menlo, Monaco, 'Courier New', monospace", // Victor Mono
  "editor.fontSize": 16.0,
  "editor.fontWeight": "normal",
  "editor.lineHeight": 22,
  "editor.letterSpacing": 0,
  "editor.fontLigatures": true,

  /* -------------------------------------------------------------------------- */
  /*                                 Inlay Hints                                */
  /* -------------------------------------------------------------------------- */
  "editor.inlayHints.enabled": "on",
  "editor.inlayHints.fontFamily": "SF Mono Square, Menlo, Monaco, 'Courier New', monospace",
  "editor.inlayHints.fontSize": 13.0,
  "editor.inlayHints.padding": true,

  /* -------------------------------------------------------------------------- */
  /*                                  Workbench                                 */
  /* -------------------------------------------------------------------------- */
  "security.workspace.trust.untrustedFiles": "open",
  "workbench.colorTheme": "Moonlight",
  // "workbench.preferredDarkColorTheme": "One Dark Pro",
  "workbench.iconTheme": "eq-material-theme-icons",
  "workbench.editor.showTabs": "multiple", // ファイルをクリックしたときに同一のタブで切り替わらない(false: プレビューモード無効)
  "workbench.editor.wrapTabs": true,

  /* -------------------------------------------------------------------------- */
  /*                                 Completion                                 */
  /* -------------------------------------------------------------------------- */
  // "editor.suggest.showKeywords": false, // falseにするとkeywordだけ消す
  "editor.suggest.showWords": false, // snippetのサジェストを最初に出す。
  "editor.suggestSelection": "first", // 入力した時にどの項目にカーソルを合わせた状態にするか
  "editor.suggest.snippetsPreventQuickSuggestions": false, // タブストップ中にも入力補完が有効
  "vsintellicode.modify.editor.suggestSelection": "automaticallyOverrodeDefaultValue",
  "tabnine.experimentalAutoImports": false,

  /* -------------------------------------------------------------------------- */
  /*                                  Terminal                                  */
  /* -------------------------------------------------------------------------- */
  "terminal.integrated.fontSize": 14,
  "terminal.integrated.fontFamily": "Hack Nerd Font, MesloLGS NF, Operator Mono Lig, monospace",
  "terminal.integrated.letterSpacing": 1.1,
  "terminal.integrated.lineHeight": 1.3,
  "terminal.integrated.gpuAcceleration": "on",
  "terminal.external.osxExec": "WezTerm.app",
  // "terminal.integrated.defaultProfile.osx": "tmux",
  // "terminal.integrated.profiles.osx": {
  //   "zsh": {
  //     "path": "zsh",
  //     "args": ["-l"]
  //   },
  //   "tmux": {
  //     "path": "tmux",
  //     "args": [
  //       "new-session",
  //       "-A", // Behave like attach-session if session-name already exists
  //       "-s", // Starts the session with a name
  //       "$(basename \"`pwd`\")" // of the current working directory
  //     ],
  //     "icon": "terminal-tmux"
  //   }
  // },
  "terminal.integrated.env.osx": {
    "CW_NEW_SESSION": "1"
  },

  /* -------------------------------------------------------------------------- */
  /*                                  Keyboard                                  */
  /* -------------------------------------------------------------------------- */
  "keyboard.dispatch": "keyCode", // US配列に固定？

  /* -------------------------------------------------------------------------- */
  /*                                    Emmet                                   */
  /* -------------------------------------------------------------------------- */
  "emmet.triggerExpansionOnTab": true,
  "emmet.showSuggestionsAsSnippets": true,
  "emmet.includeLanguages": {
    "javascript": "javascriptreact",
    "mdx": "html",
    "postcss": "css",
    "php": "html",
    "liquid": "html"
  },
  // "emmet.showExpandedAbbreviation": "never",

  /* -------------------------------------------------------------------------- */
  /*                             THEME Customization                            */
  /* -------------------------------------------------------------------------- */
  "editor.semanticTokenColorCustomizations": {
    "enabled": true,
    "rules": {
      "variable.defaultLibrary": "#E4F3FA",
      "*.readonly": "#ff94a1e3",
      "*.static": "#D19A66",
      "function": "#73bdfa"
    }
  },
  "editor.tokenColorCustomizations": {
    "comments": {
      "foreground": "#8199b8d0", // #8199b8d0
      "fontStyle": "italic"
    },
    "[Moonlight]": {
      "textMateRules": [
        {
          "scope": [
            // typescript
            "support.type.primitive"
          ],
          "settings": {
            "foreground": "#61ccda"
          }
        }
      ]
    },
    "[One Dark Pro]": {
      "textMateRules": [
        {
          "scope": [
            // "constant",
            "keyword.operator.assignment",
            "keyword.operator.comparison",
            "constant.character.entity",
            // css
            "entity.other.attribute-name.parent-selector-suffix.css",
            // typescript
            "entity.name.type",
            "support.type.primitive.ts",
            "support.type.primitive.tsx",
            "support.type.builtin.ts",
            "support.type.builtin.tsx",
            "storage.modifier.ts",
            // pug
            "constant.name.attribute.tag.pug"
          ], // セレクタ
          "settings": {
            "foreground": "#56B6C2" // #56B6C2, #31a2aa
            // "fontStyle": "そのスコープのスタイル"
          }
        },
        {
          "scope": [
            "variable",
            "support.constant",
            "constant.numeric",
            "entity.other.attribute-name",
            // css
            "meta.property-value.css",
            "variable.parameter.misc.css",
            // scss
            "variable.scss",
            "meta.property-value.scss",
            "variable.language.super.js",
            "variable.language.super.jsx",
            // typescript
            "meta.definition.property.ts variable",
            "variable.language.super.ts",
            "variable.language.super.tsx",
            // markdown
            "entity.name.section.markdown",
            "punctuation.definition.heading.markdown",
            "punctuation.definition.list.begin.markdown"
          ],
          "settings": {
            "foreground": "#D19A66" // #d17f66 #D19A66 #F28F77
          }
        },
        {
          "scope": [
            "support.function",
            "entity.name.function",
            // markdown
            "string.other.link.title.markdown",
            // env
            "constant.language.env"
          ], // function
          "settings": {
            "foreground": "#73bdfa" // #61AFEF
          }
        },
        {
          "scope": [
            "string",
            // css
            "entity.other.attribute-name.class.css",
            "variable.parameter.url.css",
            // scss
            "variable.parameter.url.scss",
            "meta.at-rule.if.scss",
            "support.constant.mathematical-symbols.scss",
            "meta.at-rule.include.scss",
            // javascript
            "string.template.js",
            "string.template.jsx",
            "meta.template.expression.js punctuation.definition",
            "meta.template.expression.jsx punctuation.definition",
            // typescript
            "string.template.ts",
            "string.template.tsx",
            "meta.template.expression.ts punctuation.definition",
            "meta.template.expression.tsx punctuation.definition",
            // markdown
            "markup.underline.link.markdown"
          ],
          "settings": {
            "foreground": "#7fd8a8" // #8FBCBB #8bc4a5
          }
        },
        {
          "scope": [
            "storage",
            "storage.type",
            "keyword.control", // ['await']
            "keyword.operator",
            "keyword.operator.logical",
            "keyword.operator.new",
            "keyword.operator.expression.keyof",
            "punctuation.separator.key-value",
            "attribute_value",
            // css
            "constant.language.pseudo.css",
            "entity.other.attribute-name.pseudo-class.css",
            // javascript
            "keyword.control.default.js",
            "keyword.control.default.jsx",
            // typescript
            "keyword.control.default.ts",
            "keyword.control.default.tsx",
            "source.ts keyword.operator",
            // env
            "keyword.other.template.begin.env",
            "keyword.other.template.end.env"
          ],
          "settings": {
            "foreground": "#d091e9" // #C678DD, #ca8ddd #d18ce6
          }
        },
        {
          "scope": [
            // css
            "constant.numeric.css",
            "support.constant.property-value.css",
            "meta.identifier.css"
            // javascript
            // typescript
          ],
          "settings": {
            "foreground": "#bc99da" // 	"#E5C07B", "#bc99da"
          }
        },
        {
          "scope": [
            "support.class",
            "support.type",
            "entity.name.type.class",
            "entity.other.inherited-class",
            /*  javascript */
            "entity.name.type.module.js",
            "entity.name.type.module.jsx",
            "variable.language.this.js",
            "variable.language.this.jsx",
            /* typescript */
            "entity.name.type.module.ts",
            "entity.name.type.module.tsx",
            "variable.language.this.ts",
            "variable.language.this.tsx"
          ],
          "settings": {
            "foreground": "#e5c97b" // 	"#E5C07B", "#bc99da"
          }
        },
        {
          "scope": [
            "variable.other.constant",
            "variable.other.local",
            "entity.name.tag",
            "keyword.other.unit",
            // css
            "constant.percentage.units.css",
            "constant.length.units.css",
            "keyword.operator.parent.css",
            // javascript
            "variable.other.constant.js",
            "variable.other.constant.jsx",
            "variable.other.constant.object.js",
            "variable.other.constant.object.jsx",
            // typescript
            "variable.other.constant.ts",
            "variable.other.constant.tsx",
            "variable.other.constant.object.ts",
            "variable.other.constant.object.tsx",
            // json
            "support.type.property-name.json",
            "support.type.property-name.json punctuation"
          ],
          "settings": {
            "foreground": "#fc819ee3" // "#fd7887e3"
          }
        },
        {
          "scope": [
            "variable.other.readwrite",
            "variable.parameter",
            "variable.other.local",
            "variable.other.constant.property",
            "support.variable.property",
            "support.constant.property",
            "support.type.property-name",
            // html
            "text.html.derivative",
            // css
            "support.type.property-name.css",
            "meta.property-name.scss",
            // javascript
            "support.variable.property.js",
            "support.variable.property.jsx",
            "variable.other.property.js",
            "variable.other.property.jsx",
            "variable.other.object.js",
            "variable.other.object.jsx",
            "variable.other.object.property.js",
            "variable.other.object.property.jsx",
            "variable.other.readwrite.js",
            "variable.other.readwrite.jsx",
            "variable.other.readwrite.alias.js",
            "variable.other.readwrite.alias.jsx",
            "meta.import.js",
            "meta.import.jsx",
            "meta.object-literal.key.js",
            "meta.object-literal.key.jsx",
            "meta.jsx.children.js",
            "meta.export.default.js variable.other.readwrite.js",
            "meta.export.default.js variable.other.readwrite.jsx",
            "variable.other.constant.property.js",
            "variable.other.constant.property.jsx",
            "variable.other.constant.object.property.js",
            "variable.other.constant.object.property.jsx",
            "variable.parameter.function.js", // pug mixin

            // typescript
            "support.variable.property.ts",
            "support.variable.property.tsx",
            "variable.other.property.ts",
            "variable.other.property.tsx",
            "variable.other.object.ts",
            "variable.other.object.tsx",
            "variable.other.object.property.ts",
            "variable.other.object.property.tsx",
            "variable.other.readwrite.ts",
            "variable.other.readwrite.alias.ts",
            "variable.other.readwrite.alias.tsx",
            "meta.import.ts",
            "meta.import.tsx",
            "meta.object-literal.key.ts",
            "meta.object-literal.key.tsx",
            "meta.jsx.children.tsx",
            "meta.export.default.js variable.other.readwrite.ts",
            "meta.export.default.js variable.other.readwrite.tsx",
            "variable.other.constant.property.ts",
            "variable.other.constant.property.tsx",
            // pug
            "text.pug",
            // liquid
            "punctuation.definition.tag.begin.liquid",
            "punctuation.definition.tag.end.liquid",
            // markdown
            "meta.paragraph.markdown",
            // env
            "source.env"
          ],
          "settings": {
            "foreground": "#E4F3FA", // #ABB2BF, #d3d3d3 #D8DEE9 #d8dcd6e8
            "fontStyle": ""
          }
        }
      ]
    }
  },
  "workbench.colorCustomizations": {
    "editor.background": "#101010",
    "editorCursor.foreground": "#e2e8f0",
    "editorCursor.background": "#063a7f",
    "editorLineNumber.activeForeground": "#559BF5",
    "scrollbarSlider.background": "#559BF55e",
    "scrollbarSlider.hoverBackground": "#559BF51e",
    "editor.lineHighlightBackground": "#1073cf2d",
    "editor.selectionBackground": "#559BF560",
    "editor.wordHighlightStrongBackground": "#559BF546",
    "editor.wordHighlightBorder": "#eeeeeea1",
    "editor.wordHighlightStrongBorder": "#eeeeeea1",
    "editor.findMatchBorder": "#559BF5",
    "editor.findMatchBackground": "#9fced11f",
    "editorBracketMatch.border": "#eeeeee57",
    "editorSuggestWidget.highlightForeground": "#559BF5",
    "editorWarning.foreground": "#fae860",
    "editorError.foreground": "#fc7f8de3",
    "progressBar.background": "#559BF5",
    "focusBorder": "#559BF5",
    "selection.background": "#559BF5",
    "scrollbar.shadow": "#559BF5",
    "editorSuggestWidget.border": "#559BF5",
    "editorSuggestWidget.selectedBackground": "#559BF560",
    "editorSuggestWidget.foreground": "#ccc",
    "editorGroupHeader.tabsBackground": "#141921",
    "peekView.border": "#559BF5",
    "peekViewEditorStickyScroll.background": "#101010",
    "tab.activeBorder": "#559BF5",
    "tab.inactiveBackground": "#141921",
    "tab.activeBackground": "#85aBF52a",
    "tab.activeForeground": "#eee",
    "tab.hoverForeground": "#ddd",
    "tab.hoverBorder": "#eee",
    "activityBar.background": "#141921",
    "activityBar.activeBorder": "#559BF5",
    "activityBarBadge.background": "#559BF5c4",
    "sideBar.foreground": "#b0b6c0",
    "sideBar.background": "#101010",
    "sideBarSectionHeader.background": "#141921",
    "sideBarSectionHeader.foreground": "#559BF5",
    "sideBar.border": "#559BF5",
    "titleBar.activeBackground": "#141921",
    "list.hoverBackground": "#559BF534",
    "list.hoverForeground": "#fff",
    "list.warningForeground": "#fae860",
    "list.errorForeground": "#fc7f8de3",
    "list.activeSelectionForeground": "#fff",
    "list.activeSelectionBackground": "#559BF565",
    "tree.indentGuidesStroke": "#559BF5",
    "statusBar.background": "#141921",
    "statusBarItem.remoteBackground": "#035770",
    "statusBarItem.remoteForeground": "#e7e7e7",
    "list.highlightForeground": "#559BF5",
    "list.focusBackground": "#559BF546",
    "list.focusForeground": "#fff",
    "button.background": "#559BF5e7",
    "notificationToast.border": "#559BF5",
    "extensionButton.prominentBackground": "#559BF5d8",
    "extensionButton.prominentHoverBackground": "#559BF581",
    "panel.border": "#559BF5",
    "panelTitle.activeBorder": "#559BF5",
    "badge.background": "#559BF5c4",
    "terminal.background": "#101010",
    "terminal.foreground": "#ebebeb",
    "terminal.ansiBlue": "#709de0",
    "terminal.ansiBrightBlack": "#626483",
    "terminal.ansiRed": "#e05b7c",
    "terminal.ansiYellow": "#c7c42d",
    "sash.hoverBorder": "#047ea2",
    "editor.lineHighlightBorder": "#9fced11f"
  },

  /* -------------------------------------------------------------------------- */
  /*                              Language Settings                             */
  /* -------------------------------------------------------------------------- */
  "[html]": {},
  "[markdown]": {},
  "[css]": {},
  "[scss]": {},
  "[tailwindcss]": {},
  "[javascript]": {},
  "[javascriptreact]": {},
  "[typescript]": {},
  "[typescriptreact]": {},
  "[astro]": {},
  "[rust]": {
    "editor.defaultFormatter": "rust-lang.rust-analyzer",
    "editor.tabSize": 4
  },
  "[php]": {
    "editor.tabSize": 4
  },
  "[liquid]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[json]": {
    "editor.quickSuggestions": {
      "strings": true
    },
    "editor.suggest.insertMode": "replace",
    "gitlens.codeLens.scopes": ["document"]
  },
  "[jsonc]": {},
  "[prisma]": {
    "editor.defaultFormatter": "Prisma.prisma"
  },
  "[dockerfile]": {
    "editor.defaultFormatter": "ms-azuretools.vscode-docker"
  },

  /* ------------------------- Javascript & Typescript ------------------------ */
  "javascript.updateImportsOnFileMove.enabled": "always",
  "javascript.format.insertSpaceAfterSemicolonInForStatements": false,
  "javascript.inlayHints.enumMemberValues.enabled": true,
  "javascript.inlayHints.functionLikeReturnTypes.enabled": true,
  "javascript.inlayHints.parameterTypes.enabled": true,
  "javascript.inlayHints.propertyDeclarationTypes.enabled": true,
  "javascript.inlayHints.variableTypes.enabled": true,
  "javascript.inlayHints.parameterNames.enabled": "literals",
  "javascript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": true,
  "javascript.inlayHints.variableTypes.suppressWhenTypeMatchesName": true,

  "typescript.updateImportsOnFileMove.enabled": "always",
  "typescript.tsserver.log": "off",
  "typescript.inlayHints.enumMemberValues.enabled": true,
  "typescript.inlayHints.functionLikeReturnTypes.enabled": true,
  "typescript.inlayHints.parameterTypes.enabled": true,
  "typescript.inlayHints.propertyDeclarationTypes.enabled": true,
  "typescript.inlayHints.variableTypes.enabled": true,
  "typescript.inlayHints.parameterNames.enabled": "literals",
  "typescript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": true,
  "typescript.inlayHints.variableTypes.suppressWhenTypeMatchesName": true,

  /* ---------------------------------- Deno ---------------------------------- */
  // "deno.inlayHints.enumMemberValues.enabled": true,
  // "deno.inlayHints.functionLikeReturnTypes.enabled": true,
  // "deno.inlayHints.parameterTypes.enabled": true,
  // "deno.inlayHints.propertyDeclarationTypes.enabled": true,
  // "deno.inlayHints.variableTypes.enabled": true,
  // "deno.inlayHints.parameterNames.enabled": "literals",

  /* --------------------------------- Svelte --------------------------------- */
  "svelte.enable-ts-plugin": true,

  /* ---------------------------------- Rust ---------------------------------- */
  "rust-analyzer.typing.autoClosingAngleBrackets.enable": true,

  /* -------------------------------------------------------------------------- */
  /*                                    Lint                                    */
  /* -------------------------------------------------------------------------- */
  "eslint.run": "onType",
  "eslint.codeAction.showDocumentation": {
    "enable": true
  },
  "eslint.options": {
    "extensions": [".js", ".jsx", ".ts", ".tsx", ".astro"]
  },
  "eslint.validate": [
    "javascript",
    "javascriptreact",
    "typescript",
    "typescriptreact",
    "astro"
  ],
  // "eslint.packageManager": "pnpm",
  "stylelint.packageManager": "pnpm",

  /* -------------------------------------------------------------------------- */
  /*                                  Formatter                                 */
  /* -------------------------------------------------------------------------- */
  "editor.defaultFormatter": "esbenp.prettier-vscode", // デフォルトフォーマッターとして Prettier プラグインを利用
  "editor.formatOnSave": true, // ファイル保存時にデフォルトフォーマッターでファイルをフォーマットする
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": "never",
    "source.fixAll.stylelint": "never"
  },

  "prettier.singleQuote": false,
  "prettier.semi": false,
  "prettier.printWidth": 80,
  "prettier.tabWidth": 2,
  "prettier.documentSelectors": ["**/*.astro", "**/*.php", "**/*.liquid"],
  // "prettier.prettierPath": "./node_modules/pretteir",

  "javascript.preferences.quoteStyle": "single",
  "typescript.preferences.quoteStyle": "single",

  "rome.formatter.quoteStyle": "Single",
  "rome.formatter.indentStyle": "Spaces",

  /* -------------------------------------------------------------------------- */
  /*                                  Stylelint                                 */
  /* -------------------------------------------------------------------------- */
  "stylelint.enable": false,
  // Disable vscode built-in linters for css, less, scss
  "css.validate": false,
  "less.validate": false,
  "scss.validate": false,

  // "stylelint.configFile": "./.stylelintrc",
  "stylelint.validate": [
    "css",
    "scss",
    "less",
    "tailwindcss",
    "astro",
    "postcss"
    // "vue",
    // "svelte"
  ],

  /* -------------------------------------------------------------------------- */
  /*                                 TailwindCSS                                */
  /* -------------------------------------------------------------------------- */
  "editor.quickSuggestions": {
    "strings": true // JSXでもCSSクラスを補完できるように
  },
  "tailwindCSS.includeLanguages": {
    "html": "HTML",
    "javascript": "javascript",
    "javascriptreact": "javascript",
    "typescript": "javascript",
    "typescriptreact": "javascript",
    "php": "php",
    "liquid": "liquid"
  },
  // "tailwindCSS.emmetCompletions": true, // emmetでTailwind CSSのクラスを使えるように
  "tailwindCSS.validate": true, // Tailwind CSSのDirectivesをLintする
  "tailwindCSS.experimental.classRegex": [
    // "className = ['\"`]([^('\"`)]*)",
    "tw`([^`]*)", // tw`...`
    "tw=\"([^\"]*)", // <div tw="..." />
    "tw={\"([^\"}]*)", // <div tw={"..."} />
    "tw\\.\\w+`([^`]*)", // tw.xxx`...`
    "tw\\(.*?\\)`([^`]*)", // tw(Component)`...`
    ["clsx\\(([^)]*)\\)", "(?:'|\"|`)([^']*)(?:'|\"|`)"], // IntelliSense support for clsx
    ["cx\\(([^)]*)\\)", "(?:'|\"|`)([^']*)(?:'|\"|`)"], // for cx
    ["cn\\(([^)]*)\\)", "(?:'|\"|`)([^']*)(?:'|\"|`)"], // for cn
    ["cva\\(([^)]*)\\)", "[\"'`]([^\"'`]*).*?[\"'`]"], // for cva
    ["tv\\((([^()]*|\\([^()]*\\))*)\\)", "[\"'`]([^\"'`]*).*?[\"'`]"], // for tailwind-variants
    "class: '([^']*)" // for liquid
  ],
  "tailwindCSS.lint.cssConflict": "ignore",
  "tailwind-fold.foldedText": "...",
  "tailwind-fold.foldLengthThreshold": 0,
  "tailwind-fold.autoFold": false,

  /* -------------------------------------------------------------------------- */
  /*                                   Quokka                                   */
  /* -------------------------------------------------------------------------- */
  "quokka.colors": {
    "covered": "#62b455",
    "errorPath": "#ffa0a0",
    "errorSource": "#fe536a",
    "notCovered": "#cccccc",
    "partiallyCovered": "#d2a032"
  },

  /* -------------------------------------------------------------------------- */
  /*                                   Peacock                                  */
  /* -------------------------------------------------------------------------- */
  "peacock.affectActivityBar": false,
  "peacock.favoriteColors": [
    {
      "name": "Angular Red",
      "value": "#dd0531"
    },
    {
      "name": "Azure Blue",
      "value": "#007fff"
    },
    {
      "name": "JavaScript Yellow",
      "value": "#f9e64f"
    },
    {
      "name": "Mandalorian Blue",
      "value": "#1857a4"
    },
    {
      "name": "Node Green",
      "value": "#215732"
    },
    {
      "name": "React Blue",
      "value": "#61dafb"
    },
    {
      "name": "Something Different",
      "value": "#832561"
    },
    {
      "name": "Svelte Orange",
      "value": "#ff3d00"
    },
    {
      "name": "Vue Green",
      "value": "#42b883"
    },
    {
      "name": "My Fav 1",
      "value": "#035770"
    }
  ],

  /* -------------------------------------------------------------------------- */
  /*                                  Todo Tree                                 */
  /* -------------------------------------------------------------------------- */
  "todo-tree.general.tags": [
    "CHANGED:",
    "@changed",
    "FIX:",
    "FIXME:",
    "@fix",
    "@fixme",
    "NOTE:",
    "@note",
    "REVIEW:",
    "@review",
    "TODO:",
    "@todo",
    "WARNING:",
    "@warning",
    "[ ]",
    "[x]"
  ],
  "todo-tree.general.tagGroups": {
    "CHANGED": ["CHANGED:", "@changed"],
    "FIX": ["FIX:", "FIXME:", "@fix", "@fixme"],
    "NOTE": ["NOTE:", "@note"],
    "REVIEW": ["REVIEW:", "@review"],
    "TODO": ["TODO:", "@todo"],
    "WARNING": ["WARNING:", "@warning"]
  },
  // https://github.com/Gruntfuggly/todo-tree/wiki/Configuration-Examples
  "todo-tree.regex.regex": "((//|#|<!--|/\\*|^\\s*\\*)\\s*($TAGS)|^(\\s*(-|\\d+\\.)?)\\s*\\[(x| )\\])",
  "todo-tree.highlights.defaultHighlight": {
    "type": "tag-and-subTag",
    "icon": "checklist",
    "fontWeight": "regular",
    "opacity": 80,
    "gutterIcon": true,
    "borderRadius": "0px"
  },
  "todo-tree.highlights.customHighlight": {
    // https://primer.style/foundations/icons
    "CHANGED": {
      "foreground": "#eee",
      "background": "#42b883",
      "icon": "check-circle",
      "iconColour": "#42b883"
    },
    "FIX": {
      "foreground": "#eee",
      "background": "#e05b7c",
      "icon": "bug",
      "iconColour": "#e05b7c"
    },
    "NOTE": {
      "foreground": "#111",
      "background": "#eee",
      "icon": "comment",
      "iconColour": "#eee"
    },
    "REVIEW": {
      "foreground": "#eee",
      "background": "#2C7CFF",
      "icon": "code-review",
      "iconColour": "#2C7CFF"
    },
    "TODO": {
      "foreground": "#eee",
      "background": "#FF5F17",
      "icon": "checklist",
      "iconColour": "#FF5F17"
    },
    "WARNING": {
      "foreground": "#111",
      "background": "#dcc40c",
      "icon": "alert",
      "iconColour": "#f4ed18"
    },
    "[ ]": {
      "foreground": "#eee",
      "background": "#e05b7c",
      "icon": "issue-draft",
      "iconColour": "#e05b7c"
    },
    "[x]": {
      "foreground": "#eee",
      "background": "#42b883",
      "icon": "issue-closed",
      "iconColour": "#42b883"
    }
  },
  "todo-tree.filtering.excludeGlobs": [
    "**/build/**",
    "**/bundle.*",
    "**/.cache",
    "**/dist/**",
    "**/.git/**",
    "**/.github/**",
    "**/*.min.*",
    "**/*.map",
    "**/.next/**",
    "**/node_modules/**",
    "**/_output/**",
    "**/.vscode/**"
  ],
  "todo-tree.tree.disableCompactFolders": true,
  "todo-tree.tree.expanded": true,

  /* -------------------------------------------------------------------------- */
  /*                               Better Comments                              */
  /* -------------------------------------------------------------------------- */
  "better-comments.multilineComments": true,
  "better-comments.tags": [
    {
      "tag": "CHANGED",
      "strikethrough": false,
      "backgroundColor": "transparent",
      "bold": false,
      "color": "#42b883"
    },
    {
      "tag": "FIXME",
      "strikethrough": false,
      "backgroundColor": "transparent",
      "bold": false,
      "color": "#e05b7c"
    },
    {
      "tag": "NOTE",
      "strikethrough": false,
      "backgroundColor": "transparent",
      "bold": false,
      "color": "#C0C0C0"
    },
    {
      "tag": "REVIEW",
      "strikethrough": false,
      "backgroundColor": "transparent",
      "bold": false,
      "color": "#2C7CFF"
    },
    {
      "tag": "TODO",
      "strikethrough": false,
      "backgroundColor": "transparent",
      "bold": false,
      "color": "#FF5F17"
    },
    {
      "tag": "WARNING",
      "strikethrough": false,
      "backgroundColor": "transparent",
      "bold": false,
      "color": "#fe536a"
    },
    {
      "tag": "--",
      "strikethrough": false,
      "backgroundColor": "transparent",
      "bold": false,
      "color": "#C0C0C0"
    },
    {
      "tag": "::",
      "strikethrough": false,
      "backgroundColor": "transparent",
      "bold": false,
      "color": "#C0C0C0"
    },
    {
      "tag": "##",
      "strikethrough": false,
      "backgroundColor": "transparent",
      "bold": false,
      "color": "#709de0"
    }
  ],

  /* -------------------------------------------------------------------------- */
  /*                                  Bookmarks                                 */
  /* -------------------------------------------------------------------------- */
  "bookmarks.sideBar.expanded": true,

  /* -------------------------------------------------------------------------- */
  /*                             Code Spell Checker                             */
  /* -------------------------------------------------------------------------- */
  "cSpell.enabled": true,
  "cSpell.spellCheckDelayMs": 100,
  "cSpell.userWords": [
    "astro",
    "astrojs",
    "bootcamp",
    "chakra",
    "Clarifai",
    "clsx",
    "colour",
    "consts",
    "contentlayer",
    "daisyui",
    "esbuild",
    "fieldname",
    "firestore",
    "Flexbox",
    "frameloop",
    "geospatial",
    "glsl",
    "glslify",
    "headlessui",
    "heroicons",
    "Hotmail",
    "kubectl",
    "kubernetes",
    "Lato",
    "Listify",
    "Mailgun",
    "mantine",
    "mapbox",
    "mapboxgl",
    "MICROTASKS",
    "middlewares",
    "minmax",
    "nanostores",
    "nextjs",
    "nextui",
    "nodebrew",
    "noopener",
    "noreferrer",
    "orangered",
    "originalname",
    "outdent",
    "overscroll",
    "persistor",
    "pnpm",
    "popmotion",
    "portafilter",
    "POSTGRES",
    "Preact",
    "prettierrc",
    "psql",
    "radash",
    "rarr",
    "reduxjs",
    "rehype",
    "roboto",
    "semibold",
    "SENDGRID",
    "settimer",
    "settimers",
    "signin",
    "signout",
    "signup",
    "skaffold",
    "sslify",
    "stylelint",
    "supabase",
    "svgr",
    "swiper",
    "tailwindcss",
    "tanstack",
    "THREADPOOL",
    "TMDB",
    "toolbelt",
    "turborepo",
    "twind",
    "upsert",
    "urql",
    "Vercel",
    "viewbox",
    "virtuals",
    "VITE",
    "youtube",
    "zustand"
  ],

  /* -------------------------------------------------------------------------- */
  /*                               Github Copilot                               */
  /* -------------------------------------------------------------------------- */
  "github.copilot.enable": {
    "*": true,
    "yaml": false,
    "plaintext": false,
    "markdown": false,
    "mdx": false
  },

  /* -------------------------------------------------------------------------- */
  /*                               Indent Rainbow                               */
  /* -------------------------------------------------------------------------- */
  "indentRainbow.colors": [
    "rgba(3, 4, 94,0.15)",
    "rgba(2, 62, 138,0.15)",
    "rgba(0, 119, 182, 0.15)",
    "rgba(0, 150, 199,0.15)",
    "rgba(0, 180, 216,0.15)",
    "rgba(72, 202, 228,0.15)",
    "rgba(144, 224, 239,0.15)"
  ],

  /* -------------------------------------------------------------------------- */
  /*                                   Draw.io                                  */
  /* -------------------------------------------------------------------------- */
  "hediet.vscode-drawio.resizeImages": null,

  /* -------------------------------------------------------------------------- */
  /*                                   Prisma                                   */
  /* -------------------------------------------------------------------------- */
  "prisma.showPrismaDataPlatformNotification": false,

  /* -------------------------------------------------------------------------- */
  /*                                     Git                                    */
  /* -------------------------------------------------------------------------- */
  "git.confirmSync": false,
  "git.openRepositoryInParentFolders": "never",
  "diffEditor.wordWrap": "off",
  "GitLive.Special branches": "main|master|trunk|dev|develop|qa|test|release[-/].*",
  "GitLive.Issue tracker integration": "Disabled",

  /* -------------------------------------------------------------------------- */
  /*                                   Testing                                  */
  /* -------------------------------------------------------------------------- */
  "playwright.reuseBrowser": false,

  /* -------------------------------------------------------------------------- */
  /*                               Thunder Client                               */
  /* -------------------------------------------------------------------------- */
  "thunder-client.httpVersion": "HTTP/2",

  /* -------------------------------------------------------------------------- */
  /*                                 Error Lens                                 */
  /* -------------------------------------------------------------------------- */
  "errorLens.enabled": true,
  "errorLens.enabledDiagnosticLevels": ["error", "info", "warning"],
  "errorLens.delay": 500,

  /* -------------------------------------------------------------------------- */
  /*                                   Drawio                                   */
  /* -------------------------------------------------------------------------- */
  "hediet.vscode-drawio.codeLinkActivated": false,
  "hediet.vscode-drawio.theme": "dark",

  /* -------------------------------------------------------------------------- */
  /*                                 Svg Preview                                */
  /* -------------------------------------------------------------------------- */
  "svgPreview.autoOpen": false,

  /* -------------------------------------------------------------------------- */
  /*                               Comment Divider                              */
  /* -------------------------------------------------------------------------- */
  "comment-divider.mainHeaderTransform": "titlecase", //先頭を大文字にする。
  "comment-divider.subheaderTransform": "titlecase", //先頭を大文字にする。

  /* -------------------------------------------------------------------------- */
  /*                                Multicommand                                */
  /* -------------------------------------------------------------------------- */
  "multiCommand.commands": [
    // Example
    // {
    //   "command": "multiCommand.swapChar",
    //   "interval": 30,
    //   "sequence": [
    //     "cursorLeftSelect",
    //     "editor.action.clipboardCutAction",
    //     "cursorRight",
    //     "editor.action.clipboardPasteAction"
    //   ]
    // },

    /* --------------------------------- Editor --------------------------------- */
    {
      "command": "multiCommand.closeEditors",
      "sequence": [
        "workbench.action.closeEditorsInGroup",
        "workbench.action.focusSideBar"
      ]
    },

    /* ---------------------------------- List ---------------------------------- */
    {
      "command": "multiCommand.focusUp",
      "sequence": [
        "list.focusUp",
        "list.focusUp",
        "list.focusUp",
        "list.focusUp",
        "list.focusUp",
        "list.focusUp",
        "list.focusUp",
        "list.focusUp"
      ]
    },
    {
      "command": "multiCommand.focusDown",
      "sequence": [
        "list.focusDown",
        "list.focusDown",
        "list.focusDown",
        "list.focusDown",
        "list.focusDown",
        "list.focusDown",
        "list.focusDown",
        "list.focusDown"
      ]
    },

    /* ----------------------------- Cursor & Motion ---------------------------- */
    {
      "command": "multiCommand.addCursorsLineEnds",
      "sequence": [
        "editor.action.insertCursorAtEndOfEachLineSelected",
        {
          "command": "vim.remap",
          "args": {
            "after": ["<Esc>", "a"]
          }
        }
      ]
    },
    {
      "command": "multiCommand.deleteCursorWord",
      "sequence": [
        "cursorWordPartRight",
        "deleteWordPartLeft",
        {
          "command": "vim.remap",
          "args": {
            "after": ["<Esc>"]
          }
        }
      ]
    },
    {
      "command": "multiCommand.deleteCursorWordAndInsert",
      "sequence": [
        "cursorWordPartRight",
        "deleteWordPartLeft",
        {
          "command": "vim.remap",
          "args": {
            "after": ["i"]
          }
        }
      ]
    },

    /* ------------------------------- Change Case ------------------------------ */
    {
      "command": "multiCommand.changeCase.upper",
      "sequence": [
        "extension.changeCase.upper",
        {
          "command": "vim.remap",
          "args": {
            "after": ["<Esc>"]
          }
        }
      ]
    },
    {
      "command": "multiCommand.changeCase.upperFirst",
      "sequence": [
        "extension.changeCase.upperFirst",
        {
          "command": "vim.remap",
          "args": {
            "after": ["<Esc>"]
          }
        }
      ]
    },
    {
      "command": "multiCommand.changeCase.lower",
      "sequence": [
        "extension.changeCase.lower",
        {
          "command": "vim.remap",
          "args": {
            "after": ["<Esc>"]
          }
        }
      ]
    },
    {
      "command": "multiCommand.changeCase.camel",
      "sequence": [
        "extension.changeCase.camel",
        {
          "command": "vim.remap",
          "args": {
            "after": ["<Esc>"]
          }
        }
      ]
    },
    {
      "command": "multiCommand.changeCase.constant",
      "sequence": [
        "extension.changeCase.constant",
        {
          "command": "vim.remap",
          "args": {
            "after": ["<Esc>"]
          }
        }
      ]
    },
    {
      "command": "multiCommand.changeCase.dot",
      "sequence": [
        "extension.changeCase.dot",
        {
          "command": "vim.remap",
          "args": {
            "after": ["<Esc>"]
          }
        }
      ]
    },
    {
      "command": "multiCommand.changeCase.path",
      "sequence": [
        "extension.changeCase.path",
        {
          "command": "vim.remap",
          "args": {
            "after": ["<Esc>"]
          }
        }
      ]
    },
    {
      "command": "multiCommand.changeCase.pascal",
      "sequence": [
        "extension.changeCase.pascal",
        {
          "command": "vim.remap",
          "args": {
            "after": ["<Esc>"]
          }
        }
      ]
    },
    {
      "command": "multiCommand.changeCase.snake",
      "sequence": [
        "extension.changeCase.snake",
        {
          "command": "vim.remap",
          "args": {
            "after": ["<Esc>"]
          }
        }
      ]
    },
    {
      "command": "multiCommand.changeCase.title",
      "sequence": [
        "extension.changeCase.title",
        {
          "command": "vim.remap",
          "args": {
            "after": ["<Esc>"]
          }
        }
      ]
    },

    /* -------------------------------- Problems -------------------------------- */
    {
      "command": "multiCommand.problems.open",
      "sequence": ["problems.action.open", "workbench.action.togglePanel"]
    },

    /* --------------------------------- Search --------------------------------- */
    {
      "command": "multiCommand.blurAfterCloseFindWidget",
      "sequence": [
        "closeFindWidget",
        {
          "command": "vim.remap",
          "args": {
            "after": ["<Esc>"]
          }
        }
      ]
    },

    /* ----------------------------------- Cmp ---------------------------------- */
    {
      "command": "multiCommand.blurAfterCloseHideSuggestWidget",
      "sequence": [
        "hideSuggestWidget",
        {
          "command": "vim.remap",
          "args": {
            "after": ["<Esc>"]
          }
        }
      ]
    }
  ],

  /* -------------------------------------------------------------------------- */
  /*                                     Vim                                    */
  /* -------------------------------------------------------------------------- */
  // Fix poor performance when inserting on vim extention?  https://github.com/microsoft/vscode/issues/75627#issuecomment-1078827311
  "extensions.experimental.affinity": {
    "vscodevim.vim": 1,
    "asvetliakov.vscode-neovim": 1
  },

  "vim.leader": "<space>",
  "vim.incsearch": true,
  "vim.useSystemClipboard": true,
  "vim.useCtrlKeys": true,
  "vim.timeout": 10000,
  "vim.whichwrap": "h,l",
  "vim.hlsearch": true,
  "vim.highlightedyank.enable": true,
  "vim.highlightedyank.color": "#559af5aa",
  "vim.highlightedyank.duration": 150,
  "vim.foldfix": true,
  "vim.statusBarColorControl": false,
  // "vim.iskeyword": "/\\()\"':,.;<>~!@#$%^&*|+=[]{}`?", // ハイフンを単語選択に含める

  // Plugins
  "vim.easymotion": true,
  "vim.sneak": true,
  "vim.camelCaseMotion.enable": false,
  "vim.replaceWithRegister": true,
  "vim.autoSwitchInputMethod.enable": true,
  "vim.autoSwitchInputMethod.defaultIM": "com.apple.keylayout.ABC",
  "vim.autoSwitchInputMethod.obtainIMCmd": "/opt/homebrew/bin/im-select",
  "vim.autoSwitchInputMethod.switchIMCmd": "/opt/homebrew/bin/im-select {im}",
  "vim.argumentObjectOpeningDelimiters": ["(", "[", "{"],
  "vim.argumentObjectClosingDelimiters": [")", "]", "}"],

  // Custom key mappings
  "vim.handleKeys": {
    "<C-k>": false,
    "<C-y>": false,
    "<C-i>": false,
    "<C-o>": false
  },
  /* -------------------------------------------------------------------------- */
  /*                               Vim Normal Mode                              */
  /* -------------------------------------------------------------------------- */
  "vim.normalModeKeyBindingsNonRecursive": [
    /* -------------------------------- Essential ------------------------------- */
    // Temp fix for code-folding when moving up/down the cursor
    // {
    //   "before": ["j"],
    //   "after": ["g", "j"]
    // },
    // {
    //   "before": ["k"],
    //   "after": ["g", "k"]
    // },
    // Undo/Redo
    {
      "before": ["u"],
      "commands": ["undo"],
      "silent": true
    },
    {
      "before": ["<C-r>"],
      "commands": ["redo"],
      "silent": true
    },

    // Fold/Unfold
    // {
    //   "before": ["z", "a"],
    //   "commands": ["editor.toggleFold"],
    //   "silent": true
    // },
    // {
    //   "before": ["z", "c"],
    //   "commands": ["editor.fold"],
    //   "silent": true
    // },
    // {
    //   "before": ["z", "C"],
    //   "commands": ["editor.foldRecursively"],
    //   "silent": true
    // },
    // {
    //   "before": ["z", "M"],
    //   "commands": ["editor.foldAll"],
    //   "silent": true
    // },
    // {
    //   "before": ["z", "o"],
    //   "commands": ["editor.unfold"],
    //   "silent": true
    // },
    // {
    //   "before": ["z", "O"],
    //   "commands": ["editor.unfoldRecursively"],
    //   "silent": true
    // },
    // {
    //   "before": ["z", "R"],
    //   "commands": ["editor.unfoldAll"],
    //   "silent": true
    // },
    {
      "before": ["z", "p"],
      "commands": ["editor.gotoParentFold"],
      "silent": true
    },
    {
      "before": ["z", "j"],
      "commands": ["editor.gotoNextFold"],
      "silent": true
    },
    {
      "before": ["z", "k"],
      "commands": ["editor.gotoPreviousFold"],
      "silent": true
    },
    {
      "before": ["z", "T"],
      "commands": ["tailwind-fold.toggleAutoFold"],
      "silent": true
    },

    // Show commands
    {
      "before": ["<leader>", "p"],
      "commands": ["workbench.action.showCommands"],
      "silent": true
    },
    // Maximize editor size
    {
      "before": ["<leader>", "m"],
      "commands": ["workbench.action.toggleEditorWidths"],
      "silent": true
    },
    // Open Settings
    {
      "before": ["<leader>", "-"],
      "commands": ["workbench.action.openApplicationSettingsJson"],
      "silent": true
    },
    // Open Keybindings
    {
      "before": ["<leader>", "y"],
      "commands": ["workbench.action.openGlobalKeybindingsFile"],
      "silent": true
    },

    /* --------------------------------- Sidebar -------------------------------- */
    // Toggle sidebar
    {
      "before": ["<leader>", "e"],
      "commands": ["workbench.action.toggleSidebarVisibility"],
      "silent": true
    },
    // Toggle activity bar
    {
      "before": ["<leader>", "E"],
      "commands": ["workbench.action.toggleActivityBarVisibility"],
      "silent": true
    },
    // Focus on Explorer
    {
      "before": ["<leader>", "o"],
      "commands": ["workbench.explorer.fileView.focus"],
      "silent": true
    },
    // Show Explorer
    {
      "before": ["<leader>", "t", "e"],
      "commands": ["workbench.view.explorer"],
      "silent": true
    },
    // Show Extension
    {
      "before": ["<leader>", "t", "x"],
      "commands": ["workbench.view.extensions"],
      "silent": true
    },
    // Show Git/Source Control
    {
      "before": ["<leader>", "t", "g"],
      "commands": ["workbench.view.scm"],
      "silent": true
    },
    // Show Bookmark
    {
      "before": ["<leader>", "t", "m"],
      "commands": ["workbench.view.extension.bookmarks"],
      "silent": true
    },
    // Show Problems
    {
      "before": ["<leader>", "t", "p"],
      "commands": ["workbench.actions.view.problems"],
      "silent": true
    },
    // Show Output
    {
      "before": ["<leader>", "t", "o"],
      "commands": ["workbench.action.output.toggleOutput"],
      "silent": true
    },
    // Show Debug console
    {
      "before": ["<leader>", "t", "d"],
      "commands": ["workbench.debug.action.toggleRepl"],
      "silent": true
    },
    // Show Github Actions
    {
      "before": ["<leader>", "t", "a"],
      "commands": ["github-actions.current-branch.focus"],
      "silent": true
    },

    /* --------------------------------- Buffer --------------------------------- */
    // Navigate buffers
    {
      "before": ["H"],
      "commands": ["workbench.action.previousEditor"],
      "silent": true
    },
    {
      "before": ["L"],
      "commands": ["workbench.action.nextEditor"],
      "silent": true
    },
    // Save file
    {
      "before": ["<leader>", "w"],
      "commands": ["workbench.action.files.save"],
      "silent": true
    },
    {
      "before": ["<leader>", "W"],
      "commands": ["workbench.action.files.saveWithoutFormatting"],
      "silent": true
    },
    // Close buffer
    {
      "before": ["<leader>", "d"],
      "commands": ["workbench.action.closeActiveEditor"],
      "silent": true
    },
    {
      "before": ["<leader>", "b", "d"],
      "commands": ["workbench.action.closeActiveEditor"],
      "silent": true
    },
    // Force close buffer
    {
      "before": ["<leader>", "D"],
      "commands": ["workbench.action.revertAndCloseActiveEditor"],
      "silent": true
    },
    // Close all editors in group
    {
      "before": ["<leader>", "q"],
      "commands": ["multiCommand.closeEditors"],
      "silent": true
    },
    // Close all editor groups
    {
      "before": ["<leader>", "Q"],
      "commands": ["workbench.action.closeAllGroups"],
      "silent": true
    },
    // Reopen closed buffer
    {
      "before": ["<leader>", "b", "t"],
      "commands": ["workbench.action.reopenClosedEditor"],
      "silent": true
    },
    // Create new file
    {
      "before": ["<leader>", "b", "n"],
      "commands": ["workbench.action.files.newUntitledFile"],
      "silent": true
    },
    // Close other buffers
    {
      "before": ["<leader>", "b", "o"],
      "commands": ["workbench.action.closeOtherEditors"],
      "silent": true
    },
    {
      "before": ["<leader>", "b", "q"],
      "commands": ["workbench.action.closeOtherEditors"],
      "silent": true
    },
    // Pin buffer
    {
      "before": ["<leader>", "b", "p"],
      "commands": ["workbench.action.pinEditor"],
      "silent": true
    },
    // Unpin buffer
    {
      "before": ["<leader>", "b", "P"],
      "commands": ["workbench.action.unpinEditor"],
      "silent": true
    },
    // Open buffer at index
    {
      "before": ["<leader>", "1"],
      "commands": ["workbench.action.openEditorAtIndex1"],
      "silent": true
    },
    {
      "before": ["<leader>", "2"],
      "commands": ["workbench.action.openEditorAtIndex2"],
      "silent": true
    },
    {
      "before": ["<leader>", "3"],
      "commands": ["workbench.action.openEditorAtIndex3"],
      "silent": true
    },
    {
      "before": ["<leader>", "4"],
      "commands": ["workbench.action.openEditorAtIndex4"],
      "silent": true
    },
    {
      "before": ["<leader>", "5"],
      "commands": ["workbench.action.openEditorAtIndex5"],
      "silent": true
    },
    {
      "before": ["<leader>", "6"],
      "commands": ["workbench.action.openEditorAtIndex6"],
      "silent": true
    },
    {
      "before": ["<leader>", "7"],
      "commands": ["workbench.action.openEditorAtIndex7"],
      "silent": true
    },
    {
      "before": ["<leader>", "8"],
      "commands": ["workbench.action.openEditorAtIndex8"],
      "silent": true
    },
    {
      "before": ["<leader>", "9"],
      "commands": ["workbench.action.openEditorAtIndex9"],
      "silent": true
    },

    /* ---------------------------------- File ---------------------------------- */
    // Find files
    {
      "before": ["<leader>", "f", "f"],
      "commands": ["workbench.action.quickOpen"],
      "silent": true
    },
    // Find word in all files
    {
      "before": ["<leader>", "f", "w"],
      "commands": ["workbench.action.findInFiles"],
      "silent": true
    },
    {
      "before": ["<leader>", "f", "a"],
      "commands": ["workbench.action.findInFiles"],
      "silent": true
    },

    /* --------------------------------- Search --------------------------------- */
    // Clear highlight
    {
      "before": ["<leader>", "h"],
      "commands": [":nohl"],
      "silent": true
    },
    // Search word
    {
      "before": ["<leader>", "s", "/"],
      "commands": ["actions.find"],
      "silent": true
    },
    // Search word to replace
    {
      "before": ["<leader>", "s", "r"],
      "commands": ["editor.action.startFindReplaceAction"],
      "silent": true
    },
    // Search word to replace in all files
    {
      "before": ["<leader>", "s", "R"],
      "commands": ["workbench.action.replaceInFiles"],
      "silent": true
    },
    // Go to symbol
    {
      "before": ["<leader>", "s", "s"],
      "commands": ["workbench.action.gotoSymbol"],
      "silent": true
    },
    // Show all symbols
    {
      "before": ["<leader>", "s", "S"],
      "commands": ["workbench.action.showAllSymbols"],
      "silent": true
    },
    // Search text cases
    {
      "before": ["<leader>", "s", "a"],
      "commands": ["extension.changeCase.commands"],
      "silent": true
    },
    // Search emmet commands
    {
      "before": ["<leader>", "s", "e"],
      "commands": ["workbench.action.showEmmetCommands"],
      "silent": true
    },
    // Search commands
    {
      "before": ["<leader>", "s", "k"],
      "commands": ["workbench.action.showCommands"],
      "silent": true
    },
    // Search panel view
    {
      "before": ["<leader>", "s", "p"],
      "commands": ["workbench.action.quickOpenView"],
      "silent": true
    },
    // Search npm modules
    {
      "before": ["<leader>", "s", "n"],
      "commands": ["extension.search"],
      "silent": true
    },
    // Show Problems
    {
      "before": ["<leader>", "s", "d"],
      "commands": ["workbench.actions.view.problems"],
      "silent": true
    },

    /* ----------------------------- Recent/session ----------------------------- */
    // Search recently used buffers
    {
      "before": ["<leader>", "f", "r"],
      "commands": ["workbench.action.showAllEditorsByMostRecentlyUsed"],
      "silent": true
    },
    // Search recently used projects
    {
      "before": ["<leader>", "f", "R"],
      "commands": ["workbench.action.openRecent"],
      "silent": true
    },
    // Remove root folder
    // {
    //   "before": ["<leader>", "r", "x"],
    //   "commands": ["workbench.action.removeRootFolder"],
    //   "silent": true
    // },

    // Project Manager
    // {
    //   "before": ["<leader>", "r", "f"],
    //   "commands": ["projectManager.listProjects"],
    //   "silent": true
    // },
    // {
    //   "before": ["<leader>", "r", "F"],
    //   "commands": ["projectManager.listProjectsNewWindow"],
    //   "silent": true
    // },
    // {
    //   "before": ["<leader>", "r", "s"],
    //   "commands": ["projectManager.saveProject"],
    //   "silent": true
    // },
    // {
    //   "before": ["<leader>", "r", "e"],
    //   "commands": ["projectManager.editProjects"],
    //   "silent": true
    // },
    // {
    //   "before": ["<leader>", "r", "a"],
    //   "commands": ["projectManager.addToWorkspace"],
    //   "silent": true
    // },

    /* ----------------------------------- Cmp ---------------------------------- */
    // Insert Snippet
    {
      "before": ["<leader>", "i", "s"],
      "commands": ["editor.action.insertSnippet"],
      "silent": true
    },
    // Insert npm module
    {
      "before": ["<leader>", "i", "n"],
      "commands": ["npm-intellisense.import"],
      "silent": true
    },

    /* ----------------------------------- Lsp ---------------------------------- */
    // Code action
    {
      "before": ["<leader>", "l", "a"],
      "commands": ["editor.action.quickFix"],
      "silent": true
    },
    {
      "before": ["<leader>", "l", "A"],
      "commands": ["editor.action.fixAll"],
      "silent": true
    },
    // Format
    {
      "before": ["<leader>", "l", "f"],
      "commands": ["editor.action.formatDocument"],
      "silent": true
    },
    // Refactor
    // {
    //   "before": ["<leader>", "l", "f"],
    //   "commands": ["editor.action.refactor"],
    //   "silent": true
    // },
    // Organize imports
    {
      "before": ["<leader>", "l", "o"],
      "commands": ["editor.action.organizeImports"],
      "silent": true
    },
    // Change Language Mode
    {
      "before": ["<leader>", "l", "i"],
      "commands": ["workbench.action.editor.changeLanguageMode"],
      "silent": true
    },
    // Open preview.js
    // {
    //   "before": ["<leader>", "l", "p"],
    //   "commands": ["previewjs.open"],
    //   "silent": true
    // },
    // Rename symbol
    {
      "before": ["<leader>", "l", "r"],
      "commands": ["editor.action.rename"],
      "silent": true
    },
    // Go to symbol
    {
      "before": ["<leader>", "l", "s"],
      "commands": ["workbench.action.gotoSymbol"],
      "silent": true
    },
    // Wrap with html tag
    {
      "before": ["<leader>", "l", "t"],
      "commands": ["editor.emmet.action.wrapWithAbbreviation"],
      "silent": true
    },
    // Hover Definition
    {
      "before": ["g", "h"],
      "commands": ["editor.action.showHover"],
      "silent": true
    },
    {
      "before": ["g", "p"],
      "commands": ["editor.action.showDefinitionPreviewHover"],
      "silent": true
    },
    // Go to Definition
    {
      "before": ["g", "d"],
      "commands": ["editor.action.revealDefinition"],
      // "commands": ["editor.action.goToDeclaration"],
      "silent": true
    },
    // Go to Implementation
    {
      "before": ["g", "I"],
      "commands": ["editor.action.goToImplementation"],
      "silent": true
    },
    // Go to Type Definition
    {
      "before": ["g", "t"],
      "commands": ["editor.action.goToTypeDefinition"],
      "silent": true
    },
    // Go to References
    {
      "before": ["g", "r"],
      "commands": ["editor.action.goToReferences"],
      "silent": true
    },
    // Find all references
    {
      "before": ["g", "R"],
      "commands": ["references-view.findReferences"],
      "silent": true
    },
    // Open link
    {
      "before": ["g", "l"],
      "commands": ["editor.action.openLink"],
      "silent": true
    },
    // Go to next problem
    {
      "before": ["]", "d"],
      "commands": ["editor.action.marker.next"],
      "silent": true
    },
    // Go to previous problem
    {
      "before": ["[", "d"],
      "commands": ["editor.action.marker.prev"],
      "silent": true
    },
    // Copy problem message
    {
      "before": ["y", "d"],
      "commands": ["errorLens.copyProblemMessage"],
      "silent": true
    },
    // Copy file path
    {
      "before": ["y", "P"],
      "commands": ["copyFilePath"],
      "silent": true
    },
    // Copy relative file path
    {
      "before": ["y", "p"],
      "commands": ["copyRelativeFilePath"],
      "silent": true
    },

    /* --------------------------- Git/Source Control --------------------------- */
    // View source control side bar
    {
      "before": ["<leader>", "g", "g"],
      "commands": ["workbench.view.scm"],
      "silent": true
    },
    // Git blame
    {
      "before": ["<leader>", "g", "l"],
      "commands": ["gitlens.toggleFileBlame"],
      "silent": true
    },
    // Reset git hunk
    {
      "before": ["<leader>", "g", "h"],
      "commands": ["git.revertSelectedRanges"],
      "silent": true
    },
    // Reset git buffer
    {
      "before": ["<leader>", "g", "r"],
      "commands": ["git.clean"],
      "silent": true
    },
    // Preview changes
    {
      "before": ["<leader>", "g", "p"],
      "commands": ["gitlens.diffLineWithWorking"],
      // "commands": ["git.openChange"],
      "silent": true
    },
    // Next/Previous hunk
    {
      "before": ["]", "g"],
      "commands": ["workbench.action.editor.nextChange"],
      "silent": true
    },
    {
      "before": ["[", "g"],
      "commands": ["workbench.action.editor.previousChange"],
      "silent": true
    },

    /* ----------------------------- Merge Conflict ----------------------------- */
    // Choose both
    {
      "before": ["<leader>", "c", "b"],
      "commands": ["merge-conflict.accept.both"]
    },
    // Choose all both
    {
      "before": ["<leader>", "c", "B"],
      "commands": ["merge-conflict.accept.all-both"]
    },
    // Choose current
    {
      "before": ["<leader>", "c", "c"],
      "commands": ["merge-conflict.accept.current"]
    },
    // Choose all current
    {
      "before": ["<leader>", "c", "C"],
      "commands": ["merge-conflict.accept.all-current"]
    },
    // Choose incoming
    {
      "before": ["<leader>", "c", "i"],
      "commands": ["merge-conflict.accept.incoming"]
    },
    // Choose all incoming
    {
      "before": ["<leader>", "c", "I"],
      "commands": ["merge-conflict.accept.all-incoming"]
    },
    // Compare current conflict
    {
      "before": ["<leader>", "c", "p"],
      "commands": ["merge-conflict.compare"]
    },
    // Next/Previous conflict
    {
      "before": ["]", "c"],
      "commands": ["merge-conflict.next"],
      "silent": true
    },
    {
      "before": ["[", "c"],
      "commands": ["merge-conflict.previous"],
      "silent": true
    },

    /* ----------------------------- Cursor & Motion ---------------------------- */

    // Faster up/down
    {
      "before": ["J"],
      "after": ["5", "g", "j"]
    },
    {
      "before": ["K"],
      "after": ["5", "g", "k"]
    },
    // Join lines
    {
      "before": ["M"],
      "after": ["J"]
    },
    // Find character forward
    {
      "before": ["f"],
      "after": ["s"]
    },
    // Find character forward
    {
      "before": ["F"],
      "after": ["S"]
    },
    // Search character
    {
      "before": ["s"],
      "after": ["<leader>", "<leader>", "s", "<char>"]
    },
    // Start of word forwards
    {
      "before": ["<leader>", "j", "f"],
      "after": ["<leader>", "<leader>", "w"]
    },
    // Start of word backward
    {
      "before": ["<leader>", "j", "F"],
      "after": ["<leader>", "<leader>", "b"]
    },
    // End of word forwards
    {
      "before": ["<leader>", "j", "e"],
      "after": ["<leader>", "<leader>", "e"]
    },
    // End of word backward
    {
      "before": ["<leader>", "j", "g", "e"],
      "after": ["<leader>", "<leader>", "g", "e"]
    },
    // Move to start of line
    {
      "before": ["<leader>", "j", "l"],
      "after": ["<leader>", "<leader>", "<leader>", "b", "d", "j", "k"]
    },
    // Camel Case Motion
    {
      "before": ["w"],
      "commands": ["cursorWordPartRight"],
      "silent": true
    },
    {
      "before": ["e"],
      "commands": ["cursorWordPartRight"],
      "silent": true
    },
    {
      "before": ["b"],
      "commands": ["cursorWordPartLeft"],
      "silent": true
    },
    {
      "before": ["d", "m"],
      "commands": ["multiCommand.deleteCursorWord"],
      "silent": true
    },
    {
      "before": ["c", "m"],
      "commands": ["multiCommand.deleteCursorWordAndInsert"],
      "silent": true
    },
    // {
    //   "before": ["w"],
    //   "after": ["<leader>", "w"]
    // },
    // {
    //   "before": ["e"],
    //   "after": ["<leader>", "e"]
    // },
    // {
    //   "before": ["b"],
    //   "after": ["<leader>", "b"]
    // },

    /* ---------------------------------- Emmet --------------------------------- */
    {
      "before": ["c", "s", "t"],
      "commands": ["editor.emmet.action.updateTag"],
      "silent": true
    },

    /* -------------------------------- Bookmark -------------------------------- */
    // Find bookmarks
    {
      "before": ["<leader>", "s", "m"],
      "commands": ["bookmarks.list"],
      "silent": true
    },
    {
      "before": ["m", "a"],
      "commands": ["bookmarks.list"],
      "silent": true
    },
    // Find bookmarks in all files
    {
      "before": ["<leader>", "s", "M"],
      "commands": ["bookmarks.listFromAllFiles"],
      "silent": true
    },
    {
      "before": ["m", "A"],
      "commands": ["bookmarks.listFromAllFiles"],
      "silent": true
    },
    // Toggle bookmark
    {
      "before": ["m", "m"],
      "commands": ["bookmarks.toggle"],
      "silent": true
    },
    // Annotate bookmark
    {
      "before": ["m", "i"],
      "commands": ["bookmarks.toggleLabeled"],
      "silent": true
    },
    // Clear bookmarks
    {
      "before": ["m", "c"],
      "commands": ["bookmarks.clear"]
    },
    // Clear bookmarks in all files
    {
      "before": ["m", "x"],
      "commands": ["bookmarks.clearFromAllFiles"]
    },
    // Next/Previous bookmark
    {
      "before": ["[", "m"],
      "commands": ["bookmarks.jumpToPrevious"],
      "silent": true
    },
    {
      "before": ["m", "p"],
      "commands": ["bookmarks.jumpToPrevious"],
      "silent": true
    },
    {
      "before": ["]", "m"],
      "commands": ["bookmarks.jumpToNext"],
      "silent": true
    },
    {
      "before": ["m", "n"],
      "commands": ["bookmarks.jumpToNext"],
      "silent": true
    },

    /* -------------------------------- Todo Tree ------------------------------- */
    // Show Todo-tree
    {
      "before": ["<leader>", "t", "t"],
      "commands": ["workbench.view.extension.todo-tree-container"],
      "silent": true
    },
    {
      "before": ["<leader>", "s", "t"],
      "commands": ["workbench.view.extension.todo-tree-container"],
      "silent": true
    },
    // Next/Previous todo
    {
      "before": ["]", "t"],
      "commands": ["todo-tree.goToNext"],
      "silent": true
    },
    {
      "before": ["[", "t"],
      "commands": ["todo-tree.goToPrevious"],
      "silent": true
    },

    /* ------------------------------- Change Case ------------------------------ */
    {
      "before": ["g", "a", "u"],
      "commands": ["multiCommand.changeCase.upper"],
      "silent": true
    },
    {
      "before": ["g", "a", "a"],
      "commands": ["multiCommand.changeCase.upperFirst"],
      "silent": true
    },
    {
      "before": ["g", "a", "l"],
      "commands": ["multiCommand.changeCase.lower"],
      "silent": true
    },
    {
      "before": ["g", "a", "c"],
      "commands": ["multiCommand.changeCase.camel"],
      "silent": true
    },
    {
      "before": ["g", "a", "n"],
      "commands": ["multiCommand.changeCase.constant"],
      "silent": true
    },
    {
      "before": ["g", "a", "d"],
      "commands": ["multiCommand.changeCase.dot"],
      "silent": true
    },
    {
      "before": ["g", "a", "f"],
      "commands": ["multiCommand.changeCase.path"],
      "silent": true
    },
    {
      "before": ["g", "a", "p"],
      "commands": ["multiCommand.changeCase.pascal"],
      "silent": true
    },
    {
      "before": ["g", "a", "s"],
      "commands": ["multiCommand.changeCase.snake"],
      "silent": true
    },
    {
      "before": ["g", "a", "t"],
      "commands": ["multiCommand.changeCase.title"],
      "silent": true
    },
    {
      "before": ["g", "a", "."],
      "commands": ["extension.changeCase.commands"],
      "silent": true
    },

    /* --------------------------------- Replace -------------------------------- */
    {
      "before": ["<leader>", "r"],
      "after": ["g", "r"]
    },
    {
      "before": ["<leader>", "r", "r"],
      "after": ["g", "r", "r"]
    },

    /* ------------------------------ Notification ------------------------------ */
    // Clear all notifications
    {
      "before": ["<leader>", "z"],
      "commands": ["notifications.clearAll"],
      "silent": true
    },

    /* ----------------------------------- Ui ----------------------------------- */
    // Toggle diagnostics
    {
      "before": ["<leader>", "u", "d"],
      "commands": ["errorLens.toggle"],
      "silent": true
    },
    // Toggle minimap
    {
      "before": ["<leader>", "u", "m"],
      "commands": ["editor.action.toggleMinimap"],
      "silent": true
    },
    // Toggle word wrap
    {
      "before": ["<leader>", "u", "w"],
      "commands": ["editor.action.toggleWordWrap"],
      "silent": true
    },
    // Toggle tailwindcss fold
    {
      "before": ["<leader>", "u", "t"],
      "commands": ["tailwind-fold.toggleAutoFold"],
      "silent": true
    },

    /* ----------------------------------- AI ----------------------------------- */
    {
      "before": ["<leader>", "a"],
      "commands": ["codeium.openChatInPane"],
      "silent": true
    }
  ],
  /* -------------------------------------------------------------------------- */
  /*                               Vim Insert Mode                              */
  /* -------------------------------------------------------------------------- */
  "vim.insertModeKeyBindings": [
    {
      "before": ["<C-p>"],
      "commands": ["cursorUp"]
    },
    {
      "before": ["<C-n>"],
      "commands": ["cursorDown"]
    },
    {
      "before": ["<C-m>"],
      "after": ["<Cr>"]
    }
  ],
  /* -------------------------------------------------------------------------- */
  /*                               Vim Visual Mode                              */
  /* -------------------------------------------------------------------------- */
  "vim.visualModeKeyBindings": [
    {
      "before": ["Backspace"],
      "after": ["d"]
    },
    // {
    //   "before": ["j"],
    //   "after": ["g", "j"]
    // },
    // {
    //   "before": ["k"],
    //   "after": ["g", "k"]
    // },
    {
      "before": ["J"],
      "after": ["5", "g", "j"]
    },
    {
      "before": ["K"],
      "after": ["5", "g", "k"]
    },
    {
      "before": ["<C-d>"],
      "after": ["2", "5", "g", "j"]
    },
    {
      "before": ["<C-u>"],
      "after": ["2", "5", "g", "k"]
    },
    {
      "before": ["<C-f>"],
      "after": ["5", "0", "g", "j"]
    },
    {
      "before": ["<C-b>"],
      "after": ["5", "0", "g", "k"]
    },
    // Stay indent/outdent mode
    {
      "before": [">"],
      "commands": ["editor.action.indentLines"],
      "silent": true
    },
    {
      "before": ["<"],
      "commands": ["editor.action.outdentLines"],
      "silent": true
    },
    // Merge conflict: accept selection
    // {
    //   "before": ["<leader>"],
    //   "commands": ["merge-conflict.accept.selection"],
    //   "silent": true
    // },
    // Change case
    {
      "before": ["g", "a", "u"],
      "commands": ["extension.changeCase.upper"],
      "silent": true
    },
    {
      "before": ["g", "a", "a"],
      "commands": ["extension.changeCase.upperFirst"],
      "silent": true
    },
    {
      "before": ["g", "a", "l"],
      "commands": ["extension.changeCase.lower"],
      "silent": true
    },
    {
      "before": ["g", "a", "c"],
      "commands": ["extension.changeCase.camel"],
      "silent": true
    },
    {
      "before": ["g", "a", "n"],
      "commands": ["extension.changeCase.constant"],
      "silent": true
    },
    {
      "before": ["g", "a", "d"],
      "commands": ["extension.changeCase.dot"],
      "silent": true
    },
    {
      "before": ["g", "a", "f"],
      "commands": ["extension.changeCase.path"],
      "silent": true
    },
    {
      "before": ["g", "a", "p"],
      "commands": ["extension.changeCase.pascal"],
      "silent": true
    },
    {
      "before": ["g", "a", "s"],
      "commands": ["extension.changeCase.snake"],
      "silent": true
    },
    {
      "before": ["g", "a", "t"],
      "commands": ["extension.changeCase.title"],
      "silent": true
    },
    // Add cursors to selected line ends
    {
      "before": ["D"],
      "commands": ["multiCommand.addCursorsLineEnds"],
      "silent": true
    },
    // Join lines
    {
      "before": ["M"],
      "commands": ["editor.action.joinLines"],
      "silent": true
    },
    // Sort ascending/descending
    {
      "before": ["s", "a"],
      "commands": ["editor.action.sortLinesAscending"],
      "silent": true
    },
    {
      "before": ["s", "d"],
      "commands": ["editor.action.sortLinesDescending"],
      "silent": true
    },
    // change motion for word
    {
      "before": ["w"],
      "after": ["a", "w"]
    },
    // change motion for Camel case motion
    {
      "before": ["m"],
      "after": ["i", "<leader>", "w"]
    }
  ],
  /* -------------------------------------------------------------------------- */
  /*                          Vim Operator Pending Mode                         */
  /* -------------------------------------------------------------------------- */
  "vim.operatorPendingModeKeyBindings": [
    // change motion for word
    {
      "before": ["w"],
      "after": ["a", "w"]
    }
    // change motion for Camel case motion
    // {
    //   "before": ["m"],
    //   "commands": ["multiCommand.deleteCursorWord"],
    //   "silent": true
    // }
    // {
    //   "before": ["m"],
    //   "after": ["i", "<leader>", "w"]
    // }
  ],

  /* -------------------------------------------------------------------------- */
  /*                                   Codeium                                  */
  /* -------------------------------------------------------------------------- */
  "grammarly.files.include": ["**/README.md", "**/readme.md", "**/*.txt"],

  /* -------------------------------------------------------------------------- */
  /*                                   Codeium                                  */
  /* -------------------------------------------------------------------------- */
  "codeium.enableConfig": {
    "*": true,
    "prisma": true,
    "liquid": true
  },

  /* -------------------------------------------------------------------------- */
  /*                              Total Typescript                              */
  /* -------------------------------------------------------------------------- */
  "totalTypeScript.hideAllTips": true,
  "totalTypeScript.hideBasicTips": true,

  /* -------------------------------------------------------------------------- */
  /*                              PHP Intelephense                              */
  /* -------------------------------------------------------------------------- */
  "intelephense.stubs": [
    "apache",
    "bcmath",
    "bz2",
    "calendar",
    "com_dotnet",
    "Core",
    "ctype",
    "curl",
    "date",
    "dba",
    "dom",
    "enchant",
    "exif",
    "FFI",
    "fileinfo",
    "filter",
    "fpm",
    "ftp",
    "gd",
    "gettext",
    "gmp",
    "hash",
    "iconv",
    "imap",
    "intl",
    "json",
    "ldap",
    "libxml",
    "mbstring",
    "meta",
    "mysqli",
    "oci8",
    "odbc",
    "openssl",
    "pcntl",
    "pcre",
    "PDO",
    "pdo_ibm",
    "pdo_mysql",
    "pdo_pgsql",
    "pdo_sqlite",
    "pgsql",
    "Phar",
    "posix",
    "pspell",
    "random",
    "readline",
    "Reflection",
    "session",
    "shmop",
    "SimpleXML",
    "snmp",
    "soap",
    "sockets",
    "sodium",
    "SPL",
    "sqlite3",
    "standard",
    "superglobals",
    "sysvmsg",
    "sysvsem",
    "sysvshm",
    "tidy",
    "tokenizer",
    "xml",
    "xmlreader",
    "xmlrpc",
    "xmlwriter",
    "xsl",
    "Zend OPcache",
    "zip",
    "zlib",
    "wordpress"
  ],

  /* -------------------------------------------------------------------------- */
  /*                                 Performance                                */
  /* -------------------------------------------------------------------------- */
  // Trying to avoid VS Code using too much CPU : https://stackoverflow.com/questions/71516186/vs-code-uses-100-cpu-even-if-it-is-closed/72518926#72518926
  "settingsSync.keybindingsPerPlatform": false,

  /* -------------------------------------------------------------------------- */
  /*                                    Other                                   */
  /* -------------------------------------------------------------------------- */
  "redhat.telemetry.enabled": false,
  "editor.minimap.enabled": false
}
