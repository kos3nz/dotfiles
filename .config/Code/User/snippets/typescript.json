{
  // Place your snippets for typescript here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  "Type GraphQL Resolver": {
    "prefix": "resolver",
    "body": [
      "import { Resolver } from \"type-graphql\";",
      "",
      "@Resolver()",
      "export class $1Resolver {",
      "  @$2()",
      "  async $3() {}",
      "}"
    ],
    "description": "TypeGraphQL Resolver"
  },
  "Util Function": {
    "prefix": "ut",
    "body": ["export const $TM_FILENAME_BASE = () => {", "", "}"],
    "description": "Util Function"
  },
  "console.log": {
    "prefix": ["console.log", "cl"],
    "body": ["console.log($0)"],
    "description": "Log output to console"
  },
  "class": {
    "prefix": ["class", "cls"],
    "body": [
      "class ${1:Class} {",
      "  constructor(${2:params}){",
      "    $3",
      "  }",
      "}"
    ],
    "description": "Class"
  },
  "function() {}": {
    "prefix": ["fn"],
    "body": ["function ${1:name}(${2:params}) {", "  ${3}", "}"],
    "description": "Function"
  },
  "async function () {}": {
    "prefix": ["async", "fna"],
    "body": ["async function ${1:functionName} (${0:prams}) {", "", "}"],
    "description": "Async function"
  },
  "async () => {}": {
    "prefix": ["async", "nfa"],
    "body": ["const ${1:functionName} = async (${2:params}) => {", "", "}"],
    "description": "Async arrow function"
  },
  "constructor": {
    "prefix": ["con"],
    "body": ["constructor(${1:public }) {", "  ${2}", "}"],
    "description": "constructor for class"
  },
  "=>": {
    "prefix": ["ar"],
    "body": ["=>"],
    "description": "arrow"
  },
  "() => {}": {
    "prefix": ["arf"],
    "body": ["($1) => {$2}"],
    "description": "arrow function"
  },
  "${}": {
    "prefix": ["$"],
    "body": ["${$0}"],
    "description": "Variable in Template Literals"
  },
  "generator": {
    "prefix": ["fng"],
    "body": ["function* $1($2) {", "  $3", "}"],
    "description": "Generator function"
  },
  //:: =============== Require and Export  =============== :://
  "require a package": {
    "prefix": ["require", "rq"],
    "body": ["const ${1:name} = require(${0:module})"],
    "description": "require a package"
  },
  "module.exports (CommonJS)": {
    "prefix": ["module.exports", "me"],
    "body": ["module.exports = ${0:object}"],
    "description": "module.exports"
  },
  "exports: function (CommonJS)": {
    "prefix": ["exports", "exf"],
    "body": ["exports.${1:function} = (${0:params}) => {", "", "}"],
    "description": "exports"
  },
  "exports: async function (CommonJS)": {
    "prefix": ["exports async", "aex"],
    "body": ["exports.${1:function} = async (${0:params}) => {", "", "}"],
    "description": "exports"
  },

  //:: =============== ES6 =============== :://
  "Import": {
    "prefix": ["im"],
    "body": ["import '${1:file}'"],
    "description": "Import"
  },
  "Import from": {
    "prefix": ["imp"],
    "body": ["import ${2:name} from '${1:module}'"],
    "description": "Import from"
  },
  "export from": {
    "prefix": "exp",
    "body": ["export {${2}} from '${1:module}'"],
    "description": "export from"
  },
  "export const": {
    "prefix": "expc",
    "body": ["export const $0"],
    "description": "export const variable"
  },
  "export default": {
    "prefix": "expd",
    "body": ["export default $0"],
    "description": "export default"
  },
  "export": {
    "prefix": "ex",
    "body": ["export {$0}"],
    "description": "export {}"
  },
  //:: =============== Express =============== :://
  "(req: Request, res: Response) => {}": {
    "prefix": "reqres",
    "body": ["(req: Request, res: Response) => {", "  $0", "}"],
    "description": "request and response function"
  },
  "(req: Request, res: Response, next: NextFunction) => {}": {
    "prefix": "reqresnex",
    "body": [
      "(req: Request, res: Response, next: NextFunction) => {",
      "  $0",
      "}"
    ],
    "description": "request and response function"
  },
  "Success response.status().json()": {
    "prefix": ["ressuccess"],
    "body": [
      "res.status(${1:200}).json({",
      "  status: '${2:success}',",
      "  data: {${3:data}},",
      "})"
    ],
    "description": "success response json"
  },
  "Error response.status().json()": {
    "prefix": ["reserror"],
    "body": [
      "res.status(${1:200}).json({",
      "  status: '${2:success}',",
      "  message: '{${3:message}',",
      "})"
    ],
    "description": "error response json"
  }
}
