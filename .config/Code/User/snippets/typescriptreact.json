{
	// Place your snippets for typescriptreact here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	"TypescriptReactArrowFunctionExportComponent": {
		"prefix": "tsrafec",
		"body": [
			"import React from 'react'",
			"",
			"export const ${TM_FILENAME_BASE/(.*)/${0:/capitalize}/}: React.FC<{}> = ({}) => {",
			"  return <${2|div,button,input,span,main,section,header,footer|}>${1:$TM_FILENAME_BASE}$3</${2|div,button,input,span,main,section,header,footer|}>",
			"}"
		],
		"description": "Typescript React Arrow Function Export Component"
	},
	"TypescriptReactArrowFunctionExportDefault": {
		"prefix": "tsrafed",
		"body": [
			"import React from 'react'",
			"",
			"const ${TM_FILENAME_BASE/(.*)/${0:/capitalize}/}: React.FC<{}> = ({}) => {",
			"  return <${2|div,button,input,span,main,section,header,footer|}>${1:$TM_FILENAME_BASE}$3</${2|div,button,input,span,main,section,header,footer|}>",
			"}",
			"",
			"export default ${TM_FILENAME_BASE/(.*)/${0:/capitalize}/}"
		],
		"description": "Typescript React Arrow Function Export Default"
	},

	"Typescript React Function Component": {
		"prefix": "rh",
		"body": [
			"import React from 'react'",
			"",
			"interface ${TM_FILENAME_BASE}Props {",
			"$1",
			"}",
			"",
			"export const $TM_FILENAME_BASE: React.FC<${TM_FILENAME_BASE}Props> = ({$2}) => {",
			"\t\treturn ($3);",
			"}"
		],
		"description": "Typescript React Function Component"
	},
	"React Native StyleSheet": {
		"prefix": "rnss",
		"body": [
			"import {StyleSheet} from 'react-native'",
			"const styles = StyleSheet.create({",
			"",
			"});"
		],
		"description": "React Native StyleSheet"
	},
	"Toggle State": {
		"prefix": "tog",
		"body": ["this.setState(state => ({", "\topen: !state.open", "}));"],
		"description": "toggle state"
	},
	"Print to console": {
		"prefix": "cl",
		"body": ["console.log($0)"],
		"description": "console.log"
	},
	"className={classnames()}": {
		"prefix": "cc",
		"body": ["className={classnames('$1')}"],
		"description": "tailwind react stuff"
	},
	"Apollo Query Component": {
		"prefix": "apq",
		"body": [
			"interface Props {",
			"  children: (data: QueryResult<$1, OperationVariables>) => JSX.Element;",
			"}",
			"",
			"export class $2 extends React.PureComponent<Props> {",
			"  render() {",
			"    return (",
			"     <Query<$1> query={$3}>{x => this.props.children(x)}</Query>",
			"    );",
			"  }",
			"}"
		],
		"description": "Apollo Query Component"
	},
	"Type GraphQL Resolver": {
		"prefix": "resolver",
		"body": [
			"import { Resolver } from \"type-graphql\";",
			"",
			"@Resolver()",
			"export class $1Resolver {",
			"  @$2()",
			"  async $3() {}",
			"}"
		],
		"description": "TypeGraphQL Resolver"
	},
	"Util Function": {
		"prefix": "ut",
		"body": ["export const $TM_FILENAME_BASE = () => {", "", "}"],
		"description": "Util Function"
	},
	"console.log": {
		"prefix": ["console.log", "cl"],
		"body": ["console.log($0)"],
		"description": "Log output to console"
	},
	"class": {
		"prefix": ["class", "cls"],
		"body": [
			"class ${1:Class} {",
			"  constructor(${2:params}){",
			"    $3",
			"  }",
			"}"
		],
		"description": "Class"
	},
	"function() {}": {
		"prefix": ["fn"],
		"body": ["function ${1:name}(${2:params}) {", "  ${3}", "}"],
		"description": "Function"
	},
	"async function () {}": {
		"prefix": ["async", "fna"],
		"body": ["async function ${1:functionName} (${0:prams}) {", "", "}"],
		"description": "Async function"
	},
	"async () => {}": {
		"prefix": ["async", "nfa"],
		"body": ["const ${1:functionName} = async (${2:params}) => {", "", "}"],
		"description": "Async arrow function"
	},
	"constructor": {
		"prefix": ["con"],
		"body": ["constructor(${1:public }) {", "  ${2}", "}"],
		"description": "constructor for class"
	},
	"className": {
		"prefix": ["cn"],
		"body": ["className='$1'"],
		"description": "className"
	},
	"clsx": {
		"prefix": ["clsx"],
		"body": ["className={clsx$1('$2')}"],
		"description": "clsx"
	},
	"=>": {
		"prefix": ["ar"],
		"body": ["=>"],
		"description": "arrow"
	},
	"() => {}": {
		"prefix": ["arf"],
		"body": ["($1) => {$2}"],
		"description": "arrow function"
	},
	"${}": {
		"prefix": ["$"],
		"body": ["${$0}"],
		"description": "Variable in Template Literals"
	},
	//:: =============== Common JS =============== :://
	"exports: function (CommonJS)": {
		"prefix": ["exports", "exf"],
		"body": ["exports.${1:function} = (${2:params}) => {", "", "}"],
		"description": "exports"
	},
	//:: =============== ES6 =============== :://
	"Import": {
		"prefix": ["im"],
		"body": ["import '${1:file}'"],
		"description": "Import"
	},
	"Import from": {
		"prefix": ["imp"],
		"body": ["import ${2:name} from '${1:module}'"],
		"description": "Import"
	},
	"export from": {
		"prefix": "exp",
		"body": ["export {${2}} from '${1:module}'"],
		"description": "export from"
	},
	"export const": {
		"prefix": "expc",
		"body": ["export const $0"],
		"description": "export const variable"
	},
	"export default": {
		"prefix": "expd",
		"body": ["export default $0"],
		"description": "export default"
	},
	"export": {
		"prefix": "ex",
		"body": ["export {$0}"],
		"description": "export {}"
	},
	//:: =============== Express =============== :://
	"(req: Request, res: Response) => {}": {
		"prefix": "reqres",
		"body": ["(req: Request, res: Response) => {", "  $0", "}"],
		"description": "request and response function"
	},
	"(req: Request, res: Response, next: NextFunction) => {}": {
		"prefix": "reqresnex",
		"body": [
			"(req: Request, res: Response, next: NextFunction) => {",
			"  $0",
			"}"
		],
		"description": "request and response function"
	},
	"Success response.status().json()": {
		"prefix": ["ressuccess"],
		"body": [
			"res.status(${1:200}).json({",
			"  status: '${2:success}',",
			"  data: {${3:data}},",
			"})"
		],
		"description": "success response json"
	},
	"Error response.status().json()": {
		"prefix": ["reserror"],
		"body": [
			"res.status(${1:200}).json({",
			"  status: '${2:success}',",
			"  message: '{${3:message}',",
			"})"
		],
		"description": "error response json"
	},
	//:: =============== NextJS =============== :://
	"Next Page": {
		"prefix": "next",
		"body": [
			"import type { NextPage } from 'next';",
			"",
			"// Types",
			"export type ${TM_FILENAME_BASE/(.*)/${0:/capitalize}/}PageProps = {}",
			"",
			"const ${TM_FILENAME_BASE/(.*)/${0:/capitalize}/}: NextPage<${TM_FILENAME_BASE/(.*)/${0:/capitalize}/}PageProps> = ({}) => {",
			"  return <${2|div,button,input,span,main,section,header,footer|}>${1:$TM_FILENAME_BASE}$3</${2|div,button,input,span,main,section,header,footer|}>",
			"}",
			"",
			"export default ${TM_FILENAME_BASE/(.*)/${0:/capitalize}/}"
		],
		"description": "NextJS Page"
	},
	"getStaticPaths": {
		"prefix": "gsp",
		"body": [
			"export const getStaticPaths: GetStaticPaths$1 = async (context$2) => {",
			"  $3",
			"  ",
			"  return {",
			"   paths: [{",
			"     params: {},",
			"   }],",
			"   fallback: false,",
			"  }",
			"};"
		],
		"description": "NextJS getStaticPaths function"
	},
	"getStaticProps": {
		"prefix": "ssg",
		"body": [
			"export const getStaticProps: GetStaticProps$1 = async (context$2) => {",
			"  $3",
			"  ",
			"  return {",
			"   props: {},",
			"  }",
			"};"
		],
		"description": "NextJS getStaticProps function"
	},
	"getServerSideProps": {
		"prefix": "ssr",
		"body": [
			"export const getServerSideProps: GetServerSideProps$1 = async (context$2) => {",
			"  $3",
			"  ",
			"  return {",
			"   props: {},",
			"  }",
			"};"
		],
		"description": "NextJS getServerSideProps function"
	},
	//:: =============== Remix =============== :://
	"Remix meta function": {
		"prefix": "meta",
		"body": [
			"export const meta: MetaFunction$1 = () => ({",
			"  title : '$2',",
			"  description : '$3',",
			"  keywords : '$4',",
			"});"
		],
		"description": "Remix meta function"
	},
	"Remix links function": {
		"prefix": "links",
		"body": [
			"export const links: LinksFunction$1 = () => [",
			"  { rel: 'stylesheet', href: ${2:styleURL}},",
			"];"
		],
		"description": "Remix links function"
	},
	"Remix headers function": {
		"prefix": "headers",
		"body": [
			"export const headers: HeadersFunction$1 = async ({${2:loaderHeaders,parentHeaders,actionHeaders}}) => ({$3})"
		],
		"description": "Remix headers function"
	},
	"Remix loader function": {
		"prefix": "loader",
		"body": [
			"export const loader: LoaderFunction$1 = async ({${2:request,params,context}}) => {$3}"
		],
		"description": "Remix loader function"
	},
	"Remix action function": {
		"prefix": "action",
		"body": [
			"export const action: ActionFunction$1 = async ({${2:request,params,context}}) => {$3}"
		],
		"description": "Remix action function"
	}
}
