{
  // Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  "console.log": {
    "prefix": ["console.log", "cl", "log"],
    "body": ["console.log($1)"],
    "description": "Log output to console"
  },
  "console.dir": {
    "prefix": ["console.dir", "dir"],
    "body": ["console.dir($1)"],
    "description": "inspecting variable"
  },
  "console.assert": {
    "prefix": ["console.assert", "assert"],
    "body": ["console.assert($1)"],
    "description": "Log output to console when first arg is wrong"
  },
  "console.table": {
    "prefix": ["console.table", "table"],
    "body": ["console.table($1)"],
    "description": "Log output to console"
  },
  "console.group": {
    "prefix": ["console.group", "group"],
    "body": ["console.group($1)"],
    "description": "Log output to console as a group"
  },
  "console.groupEnd": {
    "prefix": ["console.groupEnd", "groupEnd"],
    "body": ["console.groupEnd($1)"],
    "description": "Log output to console as a group"
  },
  "console.time": {
    "prefix": ["console.time", "time"],
    "body": ["console.time($1)"],
    "description": "Log output to console"
  },
  "console.timeEnd": {
    "prefix": ["console.timeEnd", "timeEnd"],
    "body": ["console.timeEnd($1)"],
    "description": "Log output to console"
  },
  "variable in Template Literals": {
    "prefix": ["$"],
    "body": ["${$1}"],
    "description": "Variable in Template Literals"
  },
  "const": {
    "prefix": ["const"],
    "body": ["const ${1:name} = $2"],
    "description": "const"
  },
  "class": {
    "prefix": ["class", "cls"],
    "body": ["class ${1:Class} {", "  $2", "}"],
    "description": "Class"
  },
  "constructor () {}": {
    "prefix": ["constructor", "con"],
    "body": ["constructor(${1:params}){", "  $2", "}"],
    "description": "constructor"
  },
  "function": {
    "prefix": ["fn"],
    "body": ["function ${1:name}(${2:params}) {", "  ${3}", "}"],
    "description": "Function"
  },
  "async function () {}": {
    "prefix": ["async", "fna"],
    "body": ["async function ${1:functionName} (${2:prams}) {", "", "}"],
    "description": "Async function"
  },
  "async () => {}": {
    "prefix": ["async", "nfa"],
    "body": ["const ${1:functionName} = async (${2:params}) => {", "", "}"],
    "description": "Async arrow function"
  },
  "=>": {
    "prefix": ["ar"],
    "body": ["=>"],
    "description": "Arrow"
  },
  "function*": {
    "prefix": ["fg"],
    "body": ["function* ${1:functionName}() {", "  yield $2", "}"],
    "description": "Function Generator"
  },
  //:: =============== Require and Export  =============== :://
  "require a package": {
    "prefix": ["require", "rq"],
    "body": ["const ${1:name} = require(${0:module})"],
    "description": "require a package"
  },
  "module.exports (CommonJS)": {
    "prefix": ["module.exports", "me"],
    "body": ["module.exports = ${0:object}"],
    "description": "module.exports"
  },
  "exports: function (CommonJS)": {
    "prefix": ["exports", "exf"],
    "body": ["exports.${1:function} = (${0:params}) => {", "", "}"],
    "description": "exports"
  },
  "exports: async function (CommonJS)": {
    "prefix": ["exports async", "aex"],
    "body": ["exports.${1:function} = async (${0:params}) => {", "", "}"],
    "description": "exports"
  },
  //:: =============== Import and Export =============== :://
  "Import": {
    "prefix": ["im"],
    "body": ["import '${1:module}'"],
    "description": "Import"
  },
  "Import from": {
    "prefix": ["imp"],
    "body": ["import ${2:name} from '${1:module}'"],
    "description": "Import"
  },
  "export from": {
    "prefix": "exp",
    "body": ["export {${2}} from '${1:module}'"],
    "description": "export from"
  },
  "export const": {
    "prefix": "expc",
    "body": ["export const $0"],
    "description": "export const variable"
  },
  "export default": {
    "prefix": "expd",
    "body": ["export default $0"],
    "description": "export default"
  },
  "export { default as } from": {
    "prefix": ["expdas"],
    "body": ["export { default as ${1:name} } from '${2:module}'"],
    "description": "export { default as } from"
  },
  //:: =============== Dot Env =============== :://
  "process.env": {
    "prefix": ["process.env"],
    "body": ["process.env.$1"],
    "description": "enviromental variable"
  },
  //:: =============== Express =============== :://
  "(req, res) => {}": {
    "prefix": "reqres",
    "body": ["(req, res) => {", "  $0", "}"],
    "description": "request and response function"
  },
  "Success response.status().json()": {
    "prefix": ["ressuccess"],
    "body": [
      "res.status(${1:200}).json({",
      "  status: '${2:success}',",
      "  data: {${3:data}},",
      "})"
    ],
    "description": "success response json"
  },
  "Error response.status().json()": {
    "prefix": ["reserror"],
    "body": [
      "res.status(${1:200}).json({",
      "  status: '${2:success}',",
      "  message: '{${3:message}',",
      "})"
    ],
    "description": "error response json"
  },
  //:: =============== React =============== :://
  "React Function Component": {
    "prefix": "rh",
    "body": ["export const ${1:Component} = (${2:params}) => ($3)"],
    "description": "React Function Component"
  },
  "React Function Component (export default)": {
    "prefix": "rhd",
    "body": [
      "const ${1:Component} = (${2:params}) => {",
      "  return (",
      "    <div>",
      "      $3",
      "    </div>",
      "  )",
      "}",
      "",
      "export default ${1:Component}"
    ],
    "description": "React Function Component"
  },
  "onClick event": {
    "prefix": "onClick",
    "body": ["onClick={(${1:params}) => $2}"],
    "description": "React Function Component"
  },
  "className": {
    "prefix": ["className", "cn"],
    "body": ["className='$1'"],
    "description": "JSX className"
  },

  "React Fragment": {
    "prefix": ["<>", "f"],
    "body": ["<$1>", "  $2", "</>"],
    "description": "React Fragment"
  }
}
